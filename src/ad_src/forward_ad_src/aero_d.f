C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.16 (develop) - 15 Jan 2021 14:26
C
C  Differentiation of aero in forward (tangent) mode (with options i4 dr8 r8):
C   variations   of useful results: cdtot cltot
C   with respect to varying inputs: alfa vinf xyzref rle chord
C                wstrip ensy ensz rv1 rv2 gam
C   RW status of diff variables: alfa:in vinf:in xyzref:in cdtot:out
C                cltot:out rle:in chord:in wstrip:in ensy:in ensz:in
C                rv1:in rv2:in gam:in
C***********************************************************************
C    Module:  aero.f
C 
C    Copyright (C) 2002 Mark Drela, Harold Youngren
C 
C    This program is free software; you can redistribute it and/or modify
C    it under the terms of the GNU General Public License as published by
C    the Free Software Foundation; either version 2 of the License, or
C    (at your option) any later version.
C
C    This program is distributed in the hope that it will be useful,
C    but WITHOUT ANY WARRANTY; without even the implied warranty of
C    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
C    GNU General Public License for more details.
C
C    You should have received a copy of the GNU General Public License
C    along with this program; if not, write to the Free Software
C    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
C***********************************************************************
C
      SUBROUTINE AERO_D()
      INCLUDE 'AVL.INC'
      INCLUDE 'AVL_ad_seeds.inc'
      INTEGER l
      INTEGER n
      EXTERNAL TPFORC
      REAL vsq
      REAL vsq_diff
      REAL vmag
      INTRINSIC SQRT
      INTEGER iu
C
      cdtot = 0.
      cltot = 0.
      cxtot = 0.
      cytot = 0.
      cztot = 0.
      crtot = 0.
      cmtot = 0.
      cntot = 0.
      cdvtot = 0.
C
      cdtot_a = 0.
      cltot_a = 0.
C
      DO l=1,ncontrol
        chinge(l) = 0.
      ENDDO
C
      DO n=1,numax
        cdtot_u(n) = 0.
        cltot_u(n) = 0.
        cxtot_u(n) = 0.
        cytot_u(n) = 0.
        cztot_u(n) = 0.
        crtot_u(n) = 0.
        cmtot_u(n) = 0.
        cntot_u(n) = 0.
        DO l=1,ncontrol
          chinge_u(l, n) = 0.
        ENDDO
      ENDDO
C
      DO n=1,ncontrol
        cdtot_d(n) = 0.
        cltot_d(n) = 0.
        cxtot_d(n) = 0.
        cytot_d(n) = 0.
        cztot_d(n) = 0.
        crtot_d(n) = 0.
        cmtot_d(n) = 0.
        cntot_d(n) = 0.
        DO l=1,ncontrol
          chinge_d(l, n) = 0.
        ENDDO
      ENDDO
C
      DO n=1,ndesign
        cdtot_g(n) = 0.
        cltot_g(n) = 0.
        cxtot_g(n) = 0.
        cytot_g(n) = 0.
        cztot_g(n) = 0.
        crtot_g(n) = 0.
        cmtot_g(n) = 0.
        cntot_g(n) = 0.
        DO l=1,ncontrol
          chinge_g(l, n) = 0.
        ENDDO
      ENDDO
C
C
      CALL SFFORC_D()
      CALL BDFORC_D()
      CALL TPFORC()
C
C---------------------------------------------------------
C---- add baseline reference CD
C      SINA = SIN(ALFA)
C      COSA = COS(ALFA)
C
      vsq_diff = 2*vinf(1)*vinf_diff(1) + 2*vinf(2)*vinf_diff(2) + 2*
     +  vinf(3)*vinf_diff(3)
      vsq = vinf(1)**2 + vinf(2)**2 + vinf(3)**2
      vmag = SQRT(vsq)
C
      cdvtot = cdvtot + cdref*vsq
C
      cdtot_diff = cdtot_diff + cdref*vsq_diff
      cdtot = cdtot + cdref*vsq
      cxtot = cxtot + cdref*vinf(1)*vmag
      cytot = cytot + cdref*vinf(2)*vmag
      cztot = cztot + cdref*vinf(3)*vmag
C
      cxtot_u(1) = cxtot_u(1) + cdref*vmag
      cytot_u(2) = cytot_u(2) + cdref*vmag
      cztot_u(3) = cztot_u(3) + cdref*vmag
      DO iu=1,3
        cdtot_u(iu) = cdtot_u(iu) + cdref*2.0*vinf(iu)
        cxtot_u(iu) = cxtot_u(iu) + cdref*vinf(1)*vinf(iu)/vmag
        cytot_u(iu) = cytot_u(iu) + cdref*vinf(2)*vinf(iu)/vmag
        cztot_u(iu) = cztot_u(iu) + cdref*vinf(3)*vinf(iu)/vmag
      ENDDO
C
      RETURN
      END

C  Differentiation of sfforc in forward (tangent) mode (with options i4 dr8 r8):
C   variations   of useful results: cdtot cltot
C   with respect to varying inputs: alfa vinf xyzref rle chord
C                wstrip ensy ensz rv1 rv2 gam
C AERO
C
C
C
      SUBROUTINE SFFORC_D()
      INCLUDE 'AVL.INC'
      INCLUDE 'AVL_ad_seeds.inc'
C
      REAL rrot(3)
      REAL rrot_diff(3)
      REAL veff(3), vrot(3), veff_u(3, 6), vrot_u(3), wrot_u(3)
      REAL veff_diff(3), vrot_diff(3)
      REAL vperp(3)
      REAL g(3), r(3), rh(3), mh(3)
      REAL g_diff(3)
      REAL f(3), f_u(3, 6)
      REAL f_diff(3)
      REAL fgam(3), fgam_u(3, 6), fgam_d(3, ndmax), fgam_g(3, ngmax)
      REAL fgam_diff(3)
      REAL enave(3), spn(3), udrag(3), ulift(3)
      REAL spn_diff(3), udrag_diff(3), ulift_diff(3)
C
      REAL cfx_u(numax), cfy_u(numax), cfz_u(numax), cmx_u(numax), cmy_u
     +     (numax), cmz_u(numax), cfx_d(ndmax), cfy_d(ndmax), cfz_d(
     +     ndmax), cmx_d(ndmax), cmy_d(ndmax), cmz_d(ndmax), cfx_g(ngmax
     +     ), cfy_g(ngmax), cfz_g(ngmax), cmx_g(ngmax), cmy_g(ngmax), 
     +     cmz_g(ngmax), clv_u(numax), clv_d(ndmax), clv_g(ngmax)
      REAL sina
      REAL sina_diff
      INTRINSIC SIN
      REAL cosa
      REAL cosa_diff
      INTRINSIC COS
      INTEGER j
      INTEGER i1
      INTEGER nvc_strp
      REAL cr
      REAL cr_diff
      REAL sr
      REAL sr_diff
      REAL xte1
      REAL xte2
      REAL ulmag
      REAL ulmag_diff
      REAL DOT
      REAL DOT_D
      INTRINSIC SQRT
      REAL xr
      REAL xr_diff
      REAL yr
      REAL yr_diff
      REAL zr
      REAL zr_diff
      REAL cfx
      REAL cfx_diff
      REAL cfy
      REAL cfy_diff
      REAL cfz
      REAL cfz_diff
      REAL cmx
      REAL cmy
      REAL cmz
      INTEGER n
      INTEGER ii
      INTEGER i
      INTEGER k
      REAL fnv
      REAL fnv_u
      REAL fnv_d
      REAL fnv_g
      REAL dcfx
      REAL dcfx_diff
      REAL dcfy
      REAL dcfy_diff
      REAL dcfz
      REAL dcfz_diff
      REAL dcfx_u
      REAL dcfy_u
      REAL dcfz_u
      REAL dcfx_d
      REAL dcfy_d
      REAL dcfz_d
      REAL dcfx_g
      REAL dcfy_g
      REAL dcfz_g
      INTEGER l
      REAL dfac
      INTEGER ileg
      REAL veffmag
      REAL veffmag_diff
      REAL clv
      REAL clv_diff
      REAL cdv
      REAL cdv_diff
      REAL cdv_clv
      REAL dcvfx
      REAL dcvfx_diff
      REAL dcvfy
      REAL dcvfz
      REAL dcvfz_diff
      REAL dcvfx_u
      REAL dcvfy_u
      REAL dcvfz_u
      REAL dcvfx_d
      REAL dcvfy_d
      REAL dcvfz_d
      REAL dcvfx_g
      REAL dcvfy_g
      REAL dcvfz_g
      REAL vsq
      REAL vsqi
      REAL vspan
      REAL vpsq
      REAL vpsqi
      REAL delx
      REAL dely
      REAL delz
      REAL dmag
      INTEGER is
      INTEGER nstrps
      INTEGER jj
      INTEGER l1
      INTRINSIC MOD
      INTEGER l2
      REAL dcm
      REAL enmag
      REAL result1
      REAL result1_diff
      REAL result2
      REAL arg1
      REAL arg1_diff
      REAL temp
      INTEGER ii1
C
C
      sina_diff = COS(alfa)*alfa_diff
      sina = SIN(alfa)
      cosa_diff = -(SIN(alfa)*alfa_diff)
      cosa = COS(alfa)
      DO ii1=1,nsmax
        cdstrp_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,nsmax
        clstrp_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        f_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        g_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        udrag_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        vrot_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        veff_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        ulift_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        fgam_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        rrot_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        spn_diff(ii1) = 0.D0
      ENDDO
C
C***********************************************************************
C...Integrate the forces strip-wise, surface-wise and total-wise
C***********************************************************************
C
C...Calculate strip forces...
C    normalized to strip reference quantities (strip area, chord)
      DO j=1,nstrip
C
        i1 = ijfrst(j)
        nvc_strp = nvstrp(j)
C
        cr_diff = chord_diff(j)
        cr = chord(j)
        sr_diff = wstrip(j)*chord_diff(j) + chord(j)*wstrip_diff(j)
        sr = chord(j)*wstrip(j)
C
        xte1 = rle1(1, j) + chord1(j)
        xte2 = rle2(1, j) + chord2(j)
C
C--- Define local strip lift and drag directions
C--- The "spanwise" vector is cross product of strip normal with X chordline 
        spn_diff(1) = 0.D0
        spn(1) = 0.0
        spn_diff(2) = ensz_diff(j)
        spn(2) = ensz(j)
        spn_diff(3) = -ensy_diff(j)
        spn(3) = -ensy(j)
C--- Stability axes stream vector defines drag direction
        udrag_diff(1) = cosa_diff
        udrag(1) = cosa
        udrag_diff(2) = 0.D0
        udrag(2) = 0.0
        udrag_diff(3) = sina_diff
        udrag(3) = sina
C--- Lift direction is vector product of "stream" and spanwise vector
        CALL CROSS_D(udrag, udrag_diff, spn, spn_diff, ulift, ulift_diff
     +              )
        result1_diff = DOT_D(ulift, ulift_diff, ulift, ulift_diff, 
     +    result1)
        temp = SQRT(result1)
        IF (result1 .EQ. 0.D0) THEN
          ulmag_diff = 0.D0
        ELSE
          ulmag_diff = result1_diff/(2.0*temp)
        END IF
        ulmag = temp
        IF (ulmag .EQ. 0.) THEN
          ulift_diff(3) = 0.D0
          ulift(3) = 1.0
        ELSE
          temp = ulift(1)/ulmag
          ulift_diff(1) = (ulift_diff(1)-temp*ulmag_diff)/ulmag
          ulift(1) = temp
          temp = ulift(2)/ulmag
          ulift_diff(2) = (ulift_diff(2)-temp*ulmag_diff)/ulmag
          ulift(2) = temp
          temp = ulift(3)/ulmag
          ulift_diff(3) = (ulift_diff(3)-temp*ulmag_diff)/ulmag
          ulift(3) = temp
        END IF
C
C...Use the strip 1/4 chord location for strip moments
        xr_diff = rle_diff(1, j) + 0.25*cr_diff
        xr = rle(1, j) + 0.25*cr
        yr_diff = rle_diff(2, j)
        yr = rle(2, j)
        zr_diff = rle_diff(3, j)
        zr = rle(3, j)
C
        cfx = 0.
        cfy = 0.
        cfz = 0.
        cmx = 0.
        cmy = 0.
        cmz = 0.
        cnc(j) = 0.
C
        DO n=1,numax
          cfx_u(n) = 0.
          cfy_u(n) = 0.
          cfz_u(n) = 0.
          cmx_u(n) = 0.
          cmy_u(n) = 0.
          cmz_u(n) = 0.
          cnc_u(j, n) = 0.
        ENDDO
C
        DO n=1,ncontrol
          cfx_d(n) = 0.
          cfy_d(n) = 0.
          cfz_d(n) = 0.
          cmx_d(n) = 0.
          cmy_d(n) = 0.
          cmz_d(n) = 0.
          cnc_d(j, n) = 0.
        ENDDO
C
        DO n=1,ndesign
          cfx_g(n) = 0.
          cfy_g(n) = 0.
          cfz_g(n) = 0.
          cmx_g(n) = 0.
          cmy_g(n) = 0.
          cmz_g(n) = 0.
          cnc_g(j, n) = 0.
        ENDDO
        cfx_diff = 0.D0
        cfy_diff = 0.D0
        cfz_diff = 0.D0
C
C...Sum the forces in the strip as generated by velocity
C    (freestream + rotation + induced) acting on bound vortex 
        DO ii=1,nvc_strp
          i = i1 + (ii-1)
C
C------- local moment reference vector from vortex midpoint to strip c/4 pt.
C          R(1) = 0.5*(RV1(1,I) + RV2(1,I)) - XR
C          R(2) = 0.5*(RV1(2,I) + RV2(2,I)) - YR
C          R(3) = 0.5*(RV1(3,I) + RV2(3,I)) - ZR
          r(1) = rv(1, i) - xr
          r(2) = rv(2, i) - yr
          r(3) = rv(3, i) - zr
C
C------- vector from rotation axes
C          RROT(1) = 0.5*(RV1(1,I) + RV2(1,I)) - XYZREF(1)
C          RROT(2) = 0.5*(RV1(2,I) + RV2(2,I)) - XYZREF(2)
C          RROT(3) = 0.5*(RV1(3,I) + RV2(3,I)) - XYZREF(3)
          rrot_diff(1) = -xyzref_diff(1)
          rrot(1) = rv(1, i) - xyzref(1)
          rrot_diff(2) = -xyzref_diff(2)
          rrot(2) = rv(2, i) - xyzref(2)
          rrot_diff(3) = -xyzref_diff(3)
          rrot(3) = rv(3, i) - xyzref(3)
C
C-------- set total effective velocity = freestream + rotation + induced
          DO ii1=1,3
            wrot_diff(ii1) = 0.D0
          ENDDO
          CALL CROSS_D(rrot, rrot_diff, wrot, wrot_diff, vrot, vrot_diff
     +                )
          veff_diff(1) = vinf_diff(1) + vrot_diff(1)
          veff(1) = vinf(1) + vrot(1) + wv(1, i)
          veff_diff(2) = vinf_diff(2) + vrot_diff(2)
          veff(2) = vinf(2) + vrot(2) + wv(2, i)
          veff_diff(3) = vinf_diff(3) + vrot_diff(3)
          veff(3) = vinf(3) + vrot(3) + wv(3, i)
C
C-------- set VEFF sensitivities to freestream,rotation components
          DO k=1,3
            veff_u(1, k) = wv_u(1, i, k)
            veff_u(2, k) = wv_u(2, i, k)
            veff_u(3, k) = wv_u(3, i, k)
            veff_u(k, k) = 1.0 + veff_u(k, k)
          ENDDO
          DO k=4,6
            wrot_u(1) = 0.
            wrot_u(2) = 0.
            wrot_u(3) = 0.
            wrot_u(k-3) = 1.0
            CALL CROSS(rrot, wrot_u, vrot_u)
            veff_u(1, k) = vrot_u(1) + wv_u(1, i, k)
            veff_u(2, k) = vrot_u(2) + wv_u(2, i, k)
            veff_u(3, k) = vrot_u(3) + wv_u(3, i, k)
          ENDDO
C
C-------- Force coefficient on vortex segment is 2(Veff x Gamma)
          g_diff(1) = rv2_diff(1, i) - rv1_diff(1, i)
          g(1) = rv2(1, i) - rv1(1, i)
          g_diff(2) = rv2_diff(2, i) - rv1_diff(2, i)
          g(2) = rv2(2, i) - rv1(2, i)
          g_diff(3) = rv2_diff(3, i) - rv1_diff(3, i)
          g(3) = rv2(3, i) - rv1(3, i)
          CALL CROSS_D(veff, veff_diff, g, g_diff, f, f_diff)
          DO n=1,numax
            CALL CROSS(veff_u(1, n), g, f_u(1, n))
          ENDDO
C
          fgam_diff(1) = 2.0*(f(1)*gam_diff(i)+gam(i)*f_diff(1))
          fgam(1) = 2.0*gam(i)*f(1)
          fgam_diff(2) = 2.0*(f(2)*gam_diff(i)+gam(i)*f_diff(2))
          fgam(2) = 2.0*gam(i)*f(2)
          fgam_diff(3) = 2.0*(f(3)*gam_diff(i)+gam(i)*f_diff(3))
          fgam(3) = 2.0*gam(i)*f(3)
          DO n=1,numax
            fgam_u(1, n) = 2.0*gam_u(i, n)*f(1) + 2.0*gam(i)*f_u(1, n)
            fgam_u(2, n) = 2.0*gam_u(i, n)*f(2) + 2.0*gam(i)*f_u(2, n)
            fgam_u(3, n) = 2.0*gam_u(i, n)*f(3) + 2.0*gam(i)*f_u(3, n)
          ENDDO
          DO n=1,ncontrol
            fgam_d(1, n) = 2.0*gam_d(i, n)*f(1)
            fgam_d(2, n) = 2.0*gam_d(i, n)*f(2)
            fgam_d(3, n) = 2.0*gam_d(i, n)*f(3)
          ENDDO
          DO n=1,ndesign
            fgam_g(1, n) = 2.0*gam_g(i, n)*f(1)
            fgam_g(2, n) = 2.0*gam_g(i, n)*f(2)
            fgam_g(3, n) = 2.0*gam_g(i, n)*f(3)
          ENDDO
C
C
C-------- Delta Cp (loading across lifting surface) from vortex 
          fnv = DOT(env(1, i), fgam)
          dcp(i) = fnv/(dxv(i)*wstrip(j))
C
          DO n=1,numax
            fnv_u = DOT(env(1, i), fgam_u(1, n))
            dcp_u(i, n) = fnv_u/(dxv(i)*wstrip(j))
          ENDDO
C
          DO n=1,ncontrol
            result1 = DOT(env(1, i), fgam_d(1, n))
            result2 = DOT(env_d(1, i, n), fgam)
            fnv_d = result1 + result2
            dcp_d(i, n) = fnv_d/(dxv(i)*wstrip(j))
          ENDDO
C
          DO n=1,ndesign
            result1 = DOT(env(1, i), fgam_g(1, n))
            result2 = DOT(env_g(1, i, n), fgam)
            fnv_g = result1 + result2
            dcp_g(i, n) = fnv_g/(dxv(i)*wstrip(j))
          ENDDO
C
C-------- vortex contribution to strip forces
          temp = fgam(1)/sr
          dcfx_diff = (fgam_diff(1)-temp*sr_diff)/sr
          dcfx = temp
          temp = fgam(2)/sr
          dcfy_diff = (fgam_diff(2)-temp*sr_diff)/sr
          dcfy = temp
          temp = fgam(3)/sr
          dcfz_diff = (fgam_diff(3)-temp*sr_diff)/sr
          dcfz = temp
C
C-------- forces normalized by strip area
          cfx_diff = cfx_diff + dcfx_diff
          cfx = cfx + dcfx
          cfy_diff = cfy_diff + dcfy_diff
          cfy = cfy + dcfy
          cfz_diff = cfz_diff + dcfz_diff
          cfz = cfz + dcfz
C
C-------- moments referred to strip c/4 pt., normalized by strip chord and area
          cmx = cmx + (dcfz*r(2)-dcfy*r(3))/cr
          cmy = cmy + (dcfx*r(3)-dcfz*r(1))/cr
          cmz = cmz + (dcfy*r(1)-dcfx*r(2))/cr
C
C-------- accumulate strip spanloading = c*CN
          cnc(j) = cnc(j) + cr*(ensy(j)*dcfy+ensz(j)*dcfz)
C
C-------- freestream and rotation derivatives
          DO n=1,numax
            dcfx_u = fgam_u(1, n)/sr
            dcfy_u = fgam_u(2, n)/sr
            dcfz_u = fgam_u(3, n)/sr
C
            cfx_u(n) = cfx_u(n) + dcfx_u
            cfy_u(n) = cfy_u(n) + dcfy_u
            cfz_u(n) = cfz_u(n) + dcfz_u
            cmx_u(n) = cmx_u(n) + (dcfz_u*r(2)-dcfy_u*r(3))/cr
            cmy_u(n) = cmy_u(n) + (dcfx_u*r(3)-dcfz_u*r(1))/cr
            cmz_u(n) = cmz_u(n) + (dcfy_u*r(1)-dcfx_u*r(2))/cr
C
            cnc_u(j, n) = cnc_u(j, n) + cr*(ensy(j)*dcfy_u+ensz(j)*
     +        dcfz_u)
          ENDDO
C
C-------- control derivatives
          DO n=1,ncontrol
            dcfx_d = fgam_d(1, n)/sr
            dcfy_d = fgam_d(2, n)/sr
            dcfz_d = fgam_d(3, n)/sr
C
            cfx_d(n) = cfx_d(n) + dcfx_d
            cfy_d(n) = cfy_d(n) + dcfy_d
            cfz_d(n) = cfz_d(n) + dcfz_d
            cmx_d(n) = cmx_d(n) + (dcfz_d*r(2)-dcfy_d*r(3))/cr
            cmy_d(n) = cmy_d(n) + (dcfx_d*r(3)-dcfz_d*r(1))/cr
            cmz_d(n) = cmz_d(n) + (dcfy_d*r(1)-dcfx_d*r(2))/cr
C
            cnc_d(j, n) = cnc_d(j, n) + cr*(ensy(j)*dcfy_d+ensz(j)*
     +        dcfz_d)
          ENDDO
C
C-------- design derivatives
          DO n=1,ndesign
            dcfx_g = fgam_g(1, n)/sr
            dcfy_g = fgam_g(2, n)/sr
            dcfz_g = fgam_g(3, n)/sr
C
            cfx_g(n) = cfx_g(n) + dcfx_g
            cfy_g(n) = cfy_g(n) + dcfy_g
            cfz_g(n) = cfz_g(n) + dcfz_g
            cmx_g(n) = cmx_g(n) + (dcfz_g*r(2)-dcfy_g*r(3))/cr
            cmy_g(n) = cmy_g(n) + (dcfx_g*r(3)-dcfz_g*r(1))/cr
            cmz_g(n) = cmz_g(n) + (dcfy_g*r(1)-dcfx_g*r(2))/cr
C
            cnc_g(j, n) = cnc_g(j, n) + cr*(ensy(j)*dcfy_g+ensz(j)*
     +        dcfz_g)
          ENDDO
C
C-------- hinge moments
          DO l=1,ncontrol
            rh(1) = rv(1, i) - phinge(1, j, l)
            rh(2) = rv(2, i) - phinge(2, j, l)
            rh(3) = rv(3, i) - phinge(3, j, l)
C
            dfac = dcontrol(i, l)/(sref*cref)
C
            CALL CROSS(rh, fgam, mh)
            result1 = DOT(mh, vhinge(1, j, l))
            chinge(l) = chinge(l) + result1*dfac
C
            DO n=1,numax
              CALL CROSS(rh, fgam_u(1, n), mh)
              result1 = DOT(mh, vhinge(1, j, l))
              chinge_u(l, n) = chinge_u(l, n) + result1*dfac
            ENDDO
            DO n=1,ncontrol
              CALL CROSS(rh, fgam_d(1, n), mh)
              result1 = DOT(mh, vhinge(1, j, l))
              chinge_d(l, n) = chinge_d(l, n) + result1*dfac
            ENDDO
            DO n=1,ndesign
              CALL CROSS(rh, fgam_g(1, n), mh)
              result1 = DOT(mh, vhinge(1, j, l))
              chinge_g(l, n) = chinge_g(l, n) + result1*dfac
            ENDDO
          ENDDO
        ENDDO
C
C
C
        IF (ltrforce) THEN
C
C...Sum forces in the strip as generated by velocity (freestream + rotation)
C     the parts of trailing legs which lie on the surface
          DO ii=1,nvc_strp
            i = i1 + (ii-1)
C
            DO ileg=1,2
              IF (ileg .EQ. 1) THEN
C----------- local moment reference vector from vortex midpoint to strip c/4 pt
                r(1) = 0.5*(rv1(1, i)+xte1) - xr
                r(2) = rv1(2, i) - yr
                r(3) = rv1(3, i) - zr
C 
C----------- vector from rotation axes
                rrot_diff(1) = 0.5*rv1_diff(1, i) - xyzref_diff(1)
                rrot(1) = 0.5*(rv1(1, i)+xte1) - xyzref(1)
                rrot_diff(2) = rv1_diff(2, i) - xyzref_diff(2)
                rrot(2) = rv1(2, i) - xyzref(2)
                rrot_diff(3) = rv1_diff(3, i) - xyzref_diff(3)
                rrot(3) = rv1(3, i) - xyzref(3)
C
C----------- part of trailing leg lying on surface
                g_diff(1) = rv1_diff(1, i)
                g(1) = rv1(1, i) - xte1
                g_diff(2) = 0.D0
                g(2) = 0.
                g_diff(3) = 0.D0
                g(3) = 0.
C
              ELSE
C----------- local moment reference vector from vortex midpoint to strip c/4 pt
                r(1) = 0.5*(rv2(1, i)+xte2) - xr
                r(2) = rv2(2, i) - yr
                r(3) = rv2(3, i) - zr
C
C----------- vector from rotation axes
                rrot_diff(1) = 0.5*rv2_diff(1, i) - xyzref_diff(1)
                rrot(1) = 0.5*(rv2(1, i)+xte2) - xyzref(1)
                rrot_diff(2) = rv2_diff(2, i) - xyzref_diff(2)
                rrot(2) = rv2(2, i) - xyzref(2)
                rrot_diff(3) = rv2_diff(3, i) - xyzref_diff(3)
                rrot(3) = rv2(3, i) - xyzref(3)
C
C----------- part of trailing leg lying on surface
                g_diff(1) = -rv2_diff(1, i)
                g(1) = xte2 - rv2(1, i)
                g_diff(2) = 0.D0
                g(2) = 0.
                g_diff(3) = 0.D0
                g(3) = 0.
              END IF
C
C---------- set total effective velocity = freestream + rotation
              DO ii1=1,3
                wrot_diff(ii1) = 0.D0
              ENDDO
              CALL CROSS_D(rrot, rrot_diff, wrot, wrot_diff, vrot, 
     +                     vrot_diff)
              veff_diff(1) = vinf_diff(1) + vrot_diff(1)
              veff(1) = vinf(1) + vrot(1)
              veff_diff(2) = vinf_diff(2) + vrot_diff(2)
              veff(2) = vinf(2) + vrot(2)
              veff_diff(3) = vinf_diff(3) + vrot_diff(3)
              veff(3) = vinf(3) + vrot(3)
C
C---------- set VEFF sensitivities to freestream,rotation components
              DO k=1,3
                veff_u(1, k) = 0.
                veff_u(2, k) = 0.
                veff_u(3, k) = 0.
                veff_u(k, k) = 1.0
              ENDDO
              DO k=4,6
                wrot_u(1) = 0.
                wrot_u(2) = 0.
                wrot_u(3) = 0.
                wrot_u(k-3) = 1.0
                CALL CROSS(rrot, wrot_u, vrot_u)
                veff_u(1, k) = vrot_u(1)
                veff_u(2, k) = vrot_u(2)
                veff_u(3, k) = vrot_u(3)
              ENDDO
C
C---------- Force coefficient on vortex segment is 2(Veff x Gamma)
              CALL CROSS_D(veff, veff_diff, g, g_diff, f, f_diff)
C
              DO n=1,numax
                CALL CROSS(veff_u(1, n), g, f_u(1, n))
              ENDDO
C
              fgam_diff(1) = 2.0*(f(1)*gam_diff(i)+gam(i)*f_diff(1))
              fgam(1) = 2.0*gam(i)*f(1)
              fgam_diff(2) = 2.0*(f(2)*gam_diff(i)+gam(i)*f_diff(2))
              fgam(2) = 2.0*gam(i)*f(2)
              fgam_diff(3) = 2.0*(f(3)*gam_diff(i)+gam(i)*f_diff(3))
              fgam(3) = 2.0*gam(i)*f(3)
              DO n=1,numax
                fgam_u(1, n) = 2.0*gam_u(i, n)*f(1) + 2.0*gam(i)*f_u(1, 
     +            n)
                fgam_u(2, n) = 2.0*gam_u(i, n)*f(2) + 2.0*gam(i)*f_u(2, 
     +            n)
                fgam_u(3, n) = 2.0*gam_u(i, n)*f(3) + 2.0*gam(i)*f_u(3, 
     +            n)
              ENDDO
              DO n=1,ncontrol
                fgam_d(1, n) = 2.0*gam_d(i, n)*f(1)
                fgam_d(2, n) = 2.0*gam_d(i, n)*f(2)
                fgam_d(3, n) = 2.0*gam_d(i, n)*f(3)
              ENDDO
              DO n=1,ndesign
                fgam_g(1, n) = 2.0*gam_g(i, n)*f(1)
                fgam_g(2, n) = 2.0*gam_g(i, n)*f(2)
                fgam_g(3, n) = 2.0*gam_g(i, n)*f(3)
              ENDDO
C
CC---------- Delta Cp (loading across lifting surface) due to vortex 
C            FNV = DOT(ENV(1,I),FGAM)
C            DCP(I) = FNV / (DXV(I)*WSTRIP(J))
CC
C            DO N = 1, NUMAX
C              FNV_U = DOT(ENV(1,I),FGAM_U(1,N))
C              DCP_U(I,N) = FNV_U / (DXV(I)*WSTRIP(J))
C            ENDDO
CC
C            DO N = 1, NCONTROL
C              FNV_D = DOT(ENV(1,I),FGAM_D(1,N)) + DOT(ENV_D(1,I,N),FGAM)
C              DCP_D(I,N) = FNV_D / (DXV(I)*WSTRIP(J))
C            ENDDO
CC
C            DO N = 1, NDESIGN
C              FNV_G = DOT(ENV(1,I),FGAM_G(1,N)) + DOT(ENV_G(1,I,N),FGAM)
C              DCP_G(I,N) = FNV_G / (DXV(I)*WSTRIP(J))
C            ENDDO
C
C
C---------- vortex contribution to strip forces
              temp = fgam(1)/sr
              dcfx_diff = (fgam_diff(1)-temp*sr_diff)/sr
              dcfx = temp
              temp = fgam(2)/sr
              dcfy_diff = (fgam_diff(2)-temp*sr_diff)/sr
              dcfy = temp
              temp = fgam(3)/sr
              dcfz_diff = (fgam_diff(3)-temp*sr_diff)/sr
              dcfz = temp
C
C---------- forces normalized by strip area
              cfx_diff = cfx_diff + dcfx_diff
              cfx = cfx + dcfx
              cfy_diff = cfy_diff + dcfy_diff
              cfy = cfy + dcfy
              cfz_diff = cfz_diff + dcfz_diff
              cfz = cfz + dcfz
C
C---------- moments referred to strip c/4 pt., normalized by strip chord and area
              cmx = cmx + (dcfz*r(2)-dcfy*r(3))/cr
              cmy = cmy + (dcfx*r(3)-dcfz*r(1))/cr
              cmz = cmz + (dcfy*r(1)-dcfx*r(2))/cr
C
C---------- accumulate strip spanloading = c*CN
              cnc(j) = cnc(j) + cr*(ensy(j)*dcfy+ensz(j)*dcfz)
C
C---------- freestream and rotation derivatives
              DO n=1,numax
                dcfx_u = fgam_u(1, n)/sr
                dcfy_u = fgam_u(2, n)/sr
                dcfz_u = fgam_u(3, n)/sr
C
                cfx_u(n) = cfx_u(n) + dcfx_u
                cfy_u(n) = cfy_u(n) + dcfy_u
                cfz_u(n) = cfz_u(n) + dcfz_u
                cmx_u(n) = cmx_u(n) + (dcfz_u*r(2)-dcfy_u*r(3))/cr
                cmy_u(n) = cmy_u(n) + (dcfx_u*r(3)-dcfz_u*r(1))/cr
                cmz_u(n) = cmz_u(n) + (dcfy_u*r(1)-dcfx_u*r(2))/cr
C
                cnc_u(j, n) = cnc_u(j, n) + cr*(ensy(j)*dcfy_u+ensz(j)*
     +            dcfz_u)
              ENDDO
C
C---------- control derivatives
              DO n=1,ncontrol
                dcfx_d = fgam_d(1, n)/sr
                dcfy_d = fgam_d(2, n)/sr
                dcfz_d = fgam_d(3, n)/sr
C  
                cfx_d(n) = cfx_d(n) + dcfx_d
                cfy_d(n) = cfy_d(n) + dcfy_d
                cfz_d(n) = cfz_d(n) + dcfz_d
                cmx_d(n) = cmx_d(n) + (dcfz_d*r(2)-dcfy_d*r(3))/cr
                cmy_d(n) = cmy_d(n) + (dcfx_d*r(3)-dcfz_d*r(1))/cr
                cmz_d(n) = cmz_d(n) + (dcfy_d*r(1)-dcfx_d*r(2))/cr
C  
                cnc_d(j, n) = cnc_d(j, n) + cr*(ensy(j)*dcfy_d+ensz(j)*
     +            dcfz_d)
              ENDDO
C
C---------- design derivatives
              DO n=1,ndesign
                dcfx_g = fgam_g(1, n)/sr
                dcfy_g = fgam_g(2, n)/sr
                dcfz_g = fgam_g(3, n)/sr
C
                cfx_g(n) = cfx_g(n) + dcfx_g
                cfy_g(n) = cfy_g(n) + dcfy_g
                cfz_g(n) = cfz_g(n) + dcfz_g
                cmx_g(n) = cmx_g(n) + (dcfz_g*r(2)-dcfy_g*r(3))/cr
                cmy_g(n) = cmy_g(n) + (dcfx_g*r(3)-dcfz_g*r(1))/cr
                cmz_g(n) = cmz_g(n) + (dcfy_g*r(1)-dcfx_g*r(2))/cr
C
                cnc_g(j, n) = cnc_g(j, n) + cr*(ensy(j)*dcfy_g+ensz(j)*
     +            dcfz_g)
              ENDDO
            ENDDO
          ENDDO
        END IF
C
CC---------- hinge moments
C            DO L=1, NCONTROL
C              RH(1) = RV(1,I) - PHINGE(1,J,L)
C              RH(2) = RV(2,I) - PHINGE(2,J,L)
C              RH(3) = RV(3,I) - PHINGE(3,J,L)
CC
C              DFAC = DCONTROL(I,L) / (SREF * CREF)
CC
C              CALL CROSS(RH,FGAM,MH)
C              CHINGE(L) = CHINGE(L) + DOT(MH,VHINGE(1,J,L))*DFAC
CC
C              DO N = 1, NUMAX
C                CALL CROSS(RH,FGAM_U(1,N),MH)
C                CHINGE_U(L,N) = CHINGE_U(L,N) + DOT(MH,VHINGE(1,J,L))*DFAC
C              ENDDO
C              DO N = 1, NCONTROL
C                CALL CROSS(RH,FGAM_D(1,N),MH)
C                CHINGE_D(L,N) = CHINGE_D(L,N) + DOT(MH,VHINGE(1,J,L))*DFAC
C              ENDDO
C              DO N = 1, NDESIGN
C                CALL CROSS(RH,FGAM_G(1,N),MH)
C                CHINGE_G(L,N) = CHINGE_G(L,N) + DOT(MH,VHINGE(1,J,L))*DFAC
C              ENDDO
C            ENDDO
C
C
C
C*******************************************************************
C--- Drag terms due to viscous effects
C    Drag forces are assumed to be characterized by velocity at the c/4 
C    point and are assumed to act thru the same point. CD is defined by 
C    user-specified CD(CL) polar.  Drag comes from function lookup on 
C    section polar drag using local lift coefficient.  
C
        cdv_lstrp(j) = 0.0
C
        IF (lvisc .AND. lviscstrp(j)) THEN
C--- local moment reference vector from ref point to c/4 point
C         R(1) = XR - XR
C         R(2) = YR - YR
C         R(3) = ZR - ZR
C--- Get rotational velocity at strip 1/4 chord reference point 
          rrot_diff(1) = xr_diff - xyzref_diff(1)
          rrot(1) = xr - xyzref(1)
          rrot_diff(2) = yr_diff - xyzref_diff(2)
          rrot(2) = yr - xyzref(2)
          rrot_diff(3) = zr_diff - xyzref_diff(3)
          rrot(3) = zr - xyzref(3)
C--- Onset velocity at strip c/4 = freestream + rotation
          DO ii1=1,3
            wrot_diff(ii1) = 0.D0
          ENDDO
          CALL CROSS_D(rrot, rrot_diff, wrot, wrot_diff, vrot, vrot_diff
     +                )
          veff_diff(1) = vinf_diff(1) + vrot_diff(1)
          veff(1) = vinf(1) + vrot(1)
          veff_diff(2) = vinf_diff(2) + vrot_diff(2)
          veff(2) = vinf(2) + vrot(2)
          veff_diff(3) = vinf_diff(3) + vrot_diff(3)
          veff(3) = vinf(3) + vrot(3)
          arg1_diff = 2*veff(1)*veff_diff(1) + 2*veff(2)*veff_diff(2) + 
     +      2*veff(3)*veff_diff(3)
          arg1 = veff(1)**2 + veff(2)**2 + veff(3)**2
          temp = SQRT(arg1)
          IF (arg1 .EQ. 0.D0) THEN
            veffmag_diff = 0.D0
          ELSE
            veffmag_diff = arg1_diff/(2.0*temp)
          END IF
          veffmag = temp
C
C------- set sensitivities to freestream,rotation components
          DO k=1,3
            veff_u(1, k) = 0.
            veff_u(2, k) = 0.
            veff_u(3, k) = 0.
          ENDDO
          veff_u(1, 1) = 1.0
          veff_u(2, 2) = 1.0
          veff_u(3, 3) = 1.0
          DO k=4,6
            wrot_u(1) = 0.
            wrot_u(2) = 0.
            wrot_u(3) = 0.
            wrot_u(k-3) = 1.0
            CALL CROSS(rrot, wrot_u, vrot_u)
            veff_u(1, k) = vrot_u(1)
            veff_u(2, k) = vrot_u(2)
            veff_u(3, k) = vrot_u(3)
          ENDDO
C
C--- Generate CD from stored function using strip CL as parameter
          clv_diff = cfx*ulift_diff(1) + ulift(1)*cfx_diff + cfy*
     +      ulift_diff(2) + ulift(2)*cfy_diff + cfz*ulift_diff(3) + 
     +      ulift(3)*cfz_diff
          clv = ulift(1)*cfx + ulift(2)*cfy + ulift(3)*cfz
          DO n=1,numax
            clv_u(n) = ensy(j)*cfy_u(n) + ensz(j)*(cfz_u(n)*cosa-cfx_u(n
     +        )*sina)
          ENDDO
C
          DO n=1,ncontrol
            clv_d(n) = ensy(j)*cfy_d(n) + ensz(j)*(cfz_d(n)*cosa-cfx_d(n
     +        )*sina)
          ENDDO
C
          DO n=1,ndesign
            clv_g(n) = ensy(j)*cfy_g(n) + ensz(j)*(cfz_g(n)*cosa-cfx_g(n
     +        )*sina)
          ENDDO
C
          CALL CDCL_D(j, clv, clv_diff, cdv, cdv_diff, cdv_clv)
C
C--- Strip viscous force contribution (per unit strip area)
          dcvfx_diff = veffmag*cdv*veff_diff(1) + veff(1)*(cdv*
     +      veffmag_diff+veffmag*cdv_diff)
          dcvfx = veff(1)*veffmag*cdv
          dcvfy = veff(2)*veffmag*cdv
          dcvfz_diff = veffmag*cdv*veff_diff(3) + veff(3)*(cdv*
     +      veffmag_diff+veffmag*cdv_diff)
          dcvfz = veff(3)*veffmag*cdv
C
C--- Add viscous terms to strip forces and moments
          cfx_diff = cfx_diff + dcvfx_diff
          cfx = cfx + dcvfx
          cfy = cfy + dcvfy
          cfz_diff = cfz_diff + dcvfz_diff
          cfz = cfz + dcvfz
C--- Viscous forces acting at c/4 have no effect on moments at c/4 pt.
C         CMX = CMX + (DCVFZ*R(2) - DCVFY*R(3))/CR
C         CMY = CMY + (DCVFX*R(3) - DCVFZ*R(1))/CR
C         CMZ = CMZ + (DCVFY*R(1) - DCVFX*R(2))/CR
C
          cdv_lstrp(j) = udrag(1)*dcvfx + udrag(2)*dcvfy + udrag(3)*
     +      dcvfz
C
C--- Add the sensitivity of viscous forces to the flow conditions
          DO n=1,numax
            dcvfx_u = veff_u(1, n)*(veffmag+veff(1)**2/veffmag)*cdv + 
     +        veff(1)*veffmag*cdv_clv*clv_u(n)
            dcvfy_u = veff_u(2, n)*(veffmag+veff(2)**2/veffmag)*cdv + 
     +        veff(2)*veffmag*cdv_clv*clv_u(n)
            dcvfz_u = veff_u(3, n)*(veffmag+veff(3)**2/veffmag)*cdv + 
     +        veff(3)*veffmag*cdv_clv*clv_u(n)
C
            cfx_u(n) = cfx_u(n) + dcvfx_u
            cfy_u(n) = cfy_u(n) + dcvfy_u
            cfz_u(n) = cfz_u(n) + dcvfz_u
C--- Viscous forces acting at c/4 have no effect on moments at c/4 pt.
C           CMX_U(N) = CMX_U(N) + (DCVFZ_U*R(2) - DCVFY_U*R(3))/CR
C           CMY_U(N) = CMY_U(N) + (DCVFX_U*R(3) - DCVFZ_U*R(1))/CR
C           CMZ_U(N) = CMZ_U(N) + (DCVFY_U*R(1) - DCVFX_U*R(2))/CR
C
            cnc_u(j, n) = cnc_u(j, n) + cr*(ensy(j)*dcvfy_u+ensz(j)*
     +        dcvfz_u)
          ENDDO
C
          DO n=1,ncontrol
            dcvfx_d = veff(1)*veffmag*cdv_clv*clv_d(n)
            dcvfy_d = veff(2)*veffmag*cdv_clv*clv_d(n)
            dcvfz_d = veff(3)*veffmag*cdv_clv*clv_d(n)
C
            cfx_d(n) = cfx_d(n) + dcvfx_d
            cfy_d(n) = cfy_d(n) + dcvfy_d
            cfz_d(n) = cfz_d(n) + dcvfz_d
C--- Viscous forces acting at c/4 have no effect on moments at c/4 pt.
C           CMX_D(N) = CMX_D(N) + (DCVFZ_D*R(2) - DCVFY_D*R(3))/CR
C           CMY_D(N) = CMY_D(N) + (DCVFX_D*R(3) - DCVFZ_D*R(1))/CR
C           CMZ_D(N) = CMZ_D(N) + (DCVFY_D*R(1) - DCVFX_D*R(2))/CR
C
            cnc_d(j, n) = cnc_d(j, n) + cr*(ensy(j)*dcvfy_d+ensz(j)*
     +        dcvfz_d)
          ENDDO
C
          DO n=1,ndesign
            dcvfx_g = veff(1)*veffmag*cdv_clv*clv_g(n)
            dcvfy_g = veff(2)*veffmag*cdv_clv*clv_g(n)
            dcvfz_g = veff(3)*veffmag*cdv_clv*clv_g(n)
C
            cfx_g(n) = cfx_g(n) + dcvfx_g
            cfy_g(n) = cfy_g(n) + dcvfy_g
            cfz_g(n) = cfz_g(n) + dcvfz_g
C--- Viscous forces acting at c/4 have no effect on moments at c/4 pt.
C           CMX_G(N) = CMX_G(N) + (DCVFZ_G*R(2) - DCVFY_G*R(3))/CR
C           CMY_G(N) = CMY_G(N) + (DCVFX_G*R(3) - DCVFZ_G*R(1))/CR
C           CMZ_G(N) = CMZ_G(N) + (DCVFY_G*R(1) - DCVFX_G*R(2))/CR
C
            cnc_g(j, n) = cnc_g(j, n) + cr*(ensy(j)*dcvfy_g+ensz(j)*
     +        dcvfz_g)
          ENDDO
        END IF
C
C
C*******************************************************************
C
C...Store strip X,Y,Z body axes forces 
C   (these are normalized by strip area and moments are referred to
C    c/4 point and are normalized by strip chord and area)
        cf_strp(1, j) = cfx
        cf_strp(2, j) = cfy
        cf_strp(3, j) = cfz
        cm_strp(1, j) = cmx
        cm_strp(2, j) = cmy
        cm_strp(3, j) = cmz
C
C...Transform strip body axes forces into stability axes
        cdstrp_diff(j) = cosa*cfx_diff + cfx*cosa_diff + sina*cfz_diff +
     +    cfz*sina_diff
        cdstrp(j) = cfx*cosa + cfz*sina
        clstrp_diff(j) = cosa*cfz_diff + cfz*cosa_diff - sina*cfx_diff -
     +    cfx*sina_diff
        clstrp(j) = -(cfx*sina) + cfz*cosa
        cxstrp(j) = cfx
        cystrp(j) = cfy
        czstrp(j) = cfz
C
        cdst_a(j) = -(cfx*sina) + cfz*cosa
        clst_a(j) = -(cfx*cosa) - cfz*sina
C
        DO n=1,numax
          cdst_u(j, n) = cfx_u(n)*cosa + cfz_u(n)*sina
          clst_u(j, n) = -(cfx_u(n)*sina) + cfz_u(n)*cosa
          cxst_u(j, n) = cfx_u(n)
          cyst_u(j, n) = cfy_u(n)
          czst_u(j, n) = cfz_u(n)
        ENDDO
C
        DO n=1,ncontrol
          cdst_d(j, n) = cfx_d(n)*cosa + cfz_d(n)*sina
          clst_d(j, n) = -(cfx_d(n)*sina) + cfz_d(n)*cosa
          cxst_d(j, n) = cfx_d(n)
          cyst_d(j, n) = cfy_d(n)
          czst_d(j, n) = cfz_d(n)
        ENDDO
C
        DO n=1,ndesign
          cdst_g(j, n) = cfx_g(n)*cosa + cfz_g(n)*sina
          clst_g(j, n) = -(cfx_g(n)*sina) + cfz_g(n)*cosa
          cxst_g(j, n) = cfx_g(n)
          cyst_g(j, n) = cfy_g(n)
          czst_g(j, n) = cfz_g(n)
        ENDDO
C
C... Set strip moments about the overall moment reference point XYZREF 
C     (still normalized by strip area and chord)
        r(1) = xr - xyzref(1)
        r(2) = yr - xyzref(2)
        r(3) = zr - xyzref(3)
        crstrp(j) = cmx + (cfz*r(2)-cfy*r(3))/cr
        cmstrp(j) = cmy + (cfx*r(3)-cfz*r(1))/cr
        cnstrp(j) = cmz + (cfy*r(1)-cfx*r(2))/cr
C
        DO n=1,numax
          crst_u(j, n) = cmx_u(n) + (cfz_u(n)*r(2)-cfy_u(n)*r(3))/cr
          cmst_u(j, n) = cmy_u(n) + (cfx_u(n)*r(3)-cfz_u(n)*r(1))/cr
          cnst_u(j, n) = cmz_u(n) + (cfy_u(n)*r(1)-cfx_u(n)*r(2))/cr
        ENDDO
C
        DO n=1,ncontrol
          crst_d(j, n) = cmx_d(n) + (cfz_d(n)*r(2)-cfy_d(n)*r(3))/cr
          cmst_d(j, n) = cmy_d(n) + (cfx_d(n)*r(3)-cfz_d(n)*r(1))/cr
          cnst_d(j, n) = cmz_d(n) + (cfy_d(n)*r(1)-cfx_d(n)*r(2))/cr
        ENDDO
C
        DO n=1,ndesign
          crst_g(j, n) = cmx_g(n) + (cfz_g(n)*r(2)-cfy_g(n)*r(3))/cr
          cmst_g(j, n) = cmy_g(n) + (cfx_g(n)*r(3)-cfz_g(n)*r(1))/cr
          cnst_g(j, n) = cmz_g(n) + (cfy_g(n)*r(1)-cfx_g(n)*r(2))/cr
        ENDDO
C
C...Take components of X,Y,Z forces in local strip axes 
C   (axial/normal and lift/drag)
C    in plane normal to (possibly dihedralled) strip
        cl_lstrp(j) = ulift(1)*cfx + ulift(2)*cfy + ulift(3)*cfz
        cd_lstrp(j) = udrag(1)*cfx + udrag(2)*cfy + udrag(3)*cfz
        caxlstrp(j) = cfx
        cnrmstrp(j) = ensy(j)*cfy + ensz(j)*cfz
        cmc4(j) = ensz(j)*cmy - ensy(j)*cmz
C
C------ vector at chord reference point from rotation axes
        rrot_diff(1) = -xyzref_diff(1)
        rrot(1) = xsref(j) - xyzref(1)
        rrot_diff(2) = -xyzref_diff(2)
        rrot(2) = ysref(j) - xyzref(2)
        rrot_diff(3) = -xyzref_diff(3)
        rrot(3) = zsref(j) - xyzref(3)
C
C------ set total effective velocity = freestream + rotation
        DO ii1=1,3
          wrot_diff(ii1) = 0.D0
        ENDDO
        CALL CROSS_D(rrot, rrot_diff, wrot, wrot_diff, vrot, vrot_diff)
        veff_diff(1) = vinf_diff(1) + vrot_diff(1)
        veff(1) = vinf(1) + vrot(1)
        veff_diff(2) = vinf_diff(2) + vrot_diff(2)
        veff(2) = vinf(2) + vrot(2)
        veff_diff(3) = vinf_diff(3) + vrot_diff(3)
        veff(3) = vinf(3) + vrot(3)
C
        vsq = veff(1)**2 + veff(2)**2 + veff(3)**2
        IF (vsq .EQ. 0.0) THEN
          vsqi = 1.0
        ELSE
          vsqi = 1.0/vsq
        END IF
C
C------ spanwise and perpendicular velocity components
        vspan = veff(1)*ess(1, j) + veff(2)*ess(2, j) + veff(3)*ess(3, j
     +    )
        vperp(1) = veff(1) - ess(1, j)*vspan
        vperp(2) = veff(2) - ess(2, j)*vspan
        vperp(3) = veff(3) - ess(3, j)*vspan
C
        vpsq = vperp(1)**2 + vperp(2)**2 + vperp(3)**2
        IF (vpsq .EQ. 0.0) THEN
          vpsqi = 1.0
        ELSE
          vpsqi = 1.0/vpsq
        END IF
Ccc     CLTSTRP(J) = CNRMSTRP(J) * VPSQI
        cltstrp(j) = cl_lstrp(j)*vpsqi
        clastrp(j) = cl_lstrp(j)*vsqi
C
C--- Moment about strip LE midpoint in direction of LE segment
        r(1) = xr - rle(1, j)
        r(2) = yr - rle(2, j)
        r(3) = zr - rle(3, j)
        delx = rle2(1, j) - rle1(1, j)
        dely = rle2(2, j) - rle1(2, j)
        delz = rle2(3, j) - rle1(3, j)
C
        IF (imags(nsurfs(j)) .LT. 0) THEN
          delx = -delx
          dely = -dely
          delz = -delz
        END IF
        arg1 = delx**2 + dely**2 + delz**2
        dmag = SQRT(arg1)
        cmle(j) = 0.0
        IF (dmag .NE. 0.0) cmle(j) = delx/dmag*(cmx+(cfz*r(2)-cfy*r(3))/
     +      cr) + dely/dmag*(cmy+(cfx*r(3)-cfz*r(1))/cr) + delz/dmag*(
     +      cmz+(cfy*r(1)-cfx*r(2))/cr)
      ENDDO
      cdtot_diff = 0.D0
      cltot_diff = 0.D0
      DO ii1=1,nfmax
        cdsurf_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,nfmax
        clsurf_diff(ii1) = 0.D0
      ENDDO
C
C
C
C
C...Surface forces and moments summed from strip forces...
C   XXSURF values normalized to configuration reference quantities
C   XX_SRF values normalized to each surface reference quantities
      DO is=1,nsurf
        cdsurf_diff(is) = 0.D0
        cdsurf(is) = 0.
        clsurf_diff(is) = 0.D0
        clsurf(is) = 0.
        cxsurf(is) = 0.
        cysurf(is) = 0.
        czsurf(is) = 0.
        crsurf(is) = 0.
        cmsurf(is) = 0.
        cnsurf(is) = 0.
        cdvsurf(is) = 0.
C
        cds_a(is) = 0.
        cls_a(is) = 0.
        DO n=1,numax
          cds_u(is, n) = 0.
          cls_u(is, n) = 0.
          cxs_u(is, n) = 0.
          cys_u(is, n) = 0.
          czs_u(is, n) = 0.
          crs_u(is, n) = 0.
          cms_u(is, n) = 0.
          cns_u(is, n) = 0.
        ENDDO
        DO n=1,ncontrol
          cds_d(is, n) = 0.
          cls_d(is, n) = 0.
          cxs_d(is, n) = 0.
          cys_d(is, n) = 0.
          czs_d(is, n) = 0.
          crs_d(is, n) = 0.
          cms_d(is, n) = 0.
          cns_d(is, n) = 0.
        ENDDO
        DO n=1,ndesign
          cds_g(is, n) = 0.
          cls_g(is, n) = 0.
          cxs_g(is, n) = 0.
          cys_g(is, n) = 0.
          czs_g(is, n) = 0.
          crs_g(is, n) = 0.
          cms_g(is, n) = 0.
          cns_g(is, n) = 0.
        ENDDO
C
C--- Surface body axes forces and moments
        DO l=1,3
          cf_srf(l, is) = 0.0
          cm_srf(l, is) = 0.0
          enave(l) = 0.0
        ENDDO
C
        nstrps = nj(is)
        DO jj=1,nstrps
          j = jfrst(is) + jj - 1
          sr_diff = wstrip(j)*chord_diff(j) + chord(j)*wstrip_diff(j)
          sr = chord(j)*wstrip(j)
          cr = chord(j)
          xr = rle(1, j) + 0.25*chord(j)
          yr = rle(2, j)
          zr = rle(3, j)
C
          enave(1) = 0.0
          enave(2) = enave(2) + sr*ensy(j)
          enave(3) = enave(3) + sr*ensz(j)
C
          cdsurf_diff(is) = cdsurf_diff(is) + sr*cdstrp_diff(j)/sref + 
     +      cdstrp(j)*sr_diff/sref
          cdsurf(is) = cdsurf(is) + cdstrp(j)*sr/sref
          clsurf_diff(is) = clsurf_diff(is) + sr*clstrp_diff(j)/sref + 
     +      clstrp(j)*sr_diff/sref
          clsurf(is) = clsurf(is) + clstrp(j)*sr/sref
C
          cxsurf(is) = cxsurf(is) + cxstrp(j)*sr/sref
          cysurf(is) = cysurf(is) + cystrp(j)*sr/sref
          czsurf(is) = czsurf(is) + czstrp(j)*sr/sref
C
          crsurf(is) = crsurf(is) + crstrp(j)*(sr/sref)*(cr/bref)
          cmsurf(is) = cmsurf(is) + cmstrp(j)*(sr/sref)*(cr/cref)
          cnsurf(is) = cnsurf(is) + cnstrp(j)*(sr/sref)*(cr/bref)
C
C--- Bug fix, HHY/S.Allmaras 
          cdvsurf(is) = cdvsurf(is) + cdv_lstrp(j)*(sr/sref)
C
          cds_a(is) = cds_a(is) + cdst_a(j)*sr/sref
          cls_a(is) = cls_a(is) + clst_a(j)*sr/sref
C
          DO n=1,numax
            cds_u(is, n) = cds_u(is, n) + cdst_u(j, n)*sr/sref
            cls_u(is, n) = cls_u(is, n) + clst_u(j, n)*sr/sref
C
            cxs_u(is, n) = cxs_u(is, n) + cxst_u(j, n)*sr/sref
            cys_u(is, n) = cys_u(is, n) + cyst_u(j, n)*sr/sref
            czs_u(is, n) = czs_u(is, n) + czst_u(j, n)*sr/sref
C
            crs_u(is, n) = crs_u(is, n) + crst_u(j, n)*(sr/sref)*(cr/
     +        bref)
            cms_u(is, n) = cms_u(is, n) + cmst_u(j, n)*(sr/sref)*(cr/
     +        cref)
            cns_u(is, n) = cns_u(is, n) + cnst_u(j, n)*(sr/sref)*(cr/
     +        bref)
          ENDDO
C
          DO n=1,ncontrol
            cds_d(is, n) = cds_d(is, n) + cdst_d(j, n)*sr/sref
            cls_d(is, n) = cls_d(is, n) + clst_d(j, n)*sr/sref
C
            cxs_d(is, n) = cxs_d(is, n) + cxst_d(j, n)*sr/sref
            cys_d(is, n) = cys_d(is, n) + cyst_d(j, n)*sr/sref
            czs_d(is, n) = czs_d(is, n) + czst_d(j, n)*sr/sref
C
            crs_d(is, n) = crs_d(is, n) + crst_d(j, n)*(sr/sref)*(cr/
     +        bref)
            cms_d(is, n) = cms_d(is, n) + cmst_d(j, n)*(sr/sref)*(cr/
     +        cref)
            cns_d(is, n) = cns_d(is, n) + cnst_d(j, n)*(sr/sref)*(cr/
     +        bref)
          ENDDO
C
          DO n=1,ndesign
            cds_g(is, n) = cds_g(is, n) + cdst_g(j, n)*sr/sref
            cls_g(is, n) = cls_g(is, n) + clst_g(j, n)*sr/sref
C
            cxs_g(is, n) = cxs_g(is, n) + cxst_g(j, n)*sr/sref
            cys_g(is, n) = cys_g(is, n) + cyst_g(j, n)*sr/sref
            czs_g(is, n) = czs_g(is, n) + czst_g(j, n)*sr/sref
C
            crs_g(is, n) = crs_g(is, n) + crst_g(j, n)*(sr/sref)*(cr/
     +        bref)
            cms_g(is, n) = cms_g(is, n) + cmst_g(j, n)*(sr/sref)*(cr/
     +        cref)
            cns_g(is, n) = cns_g(is, n) + cnst_g(j, n)*(sr/sref)*(cr/
     +        bref)
          ENDDO
C
C--- reference point for surface LE (hinge) moments
C    defined by surface hinge vector direction thru first strip LE point
          IF (imags(is) .GE. 0) THEN
            r(1) = xr - rle1(1, jfrst(is))
            r(2) = yr - rle1(2, jfrst(is))
            r(3) = zr - rle1(3, jfrst(is))
          ELSE
            r(1) = xr - rle2(1, jfrst(is))
            r(2) = yr - rle2(2, jfrst(is))
            r(3) = zr - rle2(3, jfrst(is))
          END IF
C--- Surface forces and moments (about LE ref point, normalized locally) 
          DO l=1,3
            l1 = MOD(l, 3) + 1
            l2 = MOD(l1, 3) + 1
C
            cf_srf(l, is) = cf_srf(l, is) + cf_strp(l, j)*sr/ssurf(is)
C
            dcm = sr/ssurf(is)*cr/cavesurf(is)*(cm_strp(l, j)+cf_strp(l2
     +        , j)*r(l1)/cr-cf_strp(l1, j)*r(l2)/cr)
C
            cm_srf(l, is) = cm_srf(l, is) + dcm
          ENDDO
        ENDDO
C
C
C--- To define surface CL and CD we need local lift and drag directions...
C--- Define drag and lift directions for surface using average strip normal
        enave(1) = enave(1)/ssurf(is)
        enave(2) = enave(2)/ssurf(is)
        enave(3) = enave(3)/ssurf(is)
        result1 = DOT(enave, enave)
        enmag = SQRT(result1)
        IF (enmag .EQ. 0.) THEN
          enave(3) = 1.0
        ELSE
          enave(1) = enave(1)/enmag
          enave(2) = enave(2)/enmag
          enave(3) = enave(3)/enmag
        END IF
C--- Define a "spanwise" vector with cross product of average surface normal 
C    with chordline (x direction)
        spn(1) = 0.0
        spn(2) = enave(3)
        spn(3) = -enave(2)
C--- Stability axes stream vector defines drag direction
        udrag(1) = cosa
        udrag(2) = 0.0
        udrag(3) = sina
C--- Lift direction is vector product of "stream" and spanwise vector
        CALL CROSS(udrag, spn, ulift)
        result1 = DOT(ulift, ulift)
        ulmag = SQRT(result1)
        IF (ulmag .EQ. 0.) THEN
          ulift(3) = 1.0
        ELSE
          ulift(1) = ulift(1)/ulmag
          ulift(2) = ulift(2)/ulmag
          ulift(3) = ulift(3)/ulmag
        END IF
        cl_srf(is) = DOT(ulift, cf_srf(1, is))
        cd_srf(is) = DOT(udrag, cf_srf(1, is))
C--- Surface hinge moments defined by surface LE moment about hinge vector 
Ccc        CMLE_SRF(IS) = DOT(CM_SRF(1,IS),VHINGE(1,IS))
C
C
C-------------------------------------------------
        IF (lfload(is)) THEN
C------- Total forces summed from surface forces...
C-         normalized to configuration reference quantities
          cdtot_diff = cdtot_diff + cdsurf_diff(is)
          cdtot = cdtot + cdsurf(is)
          cltot_diff = cltot_diff + clsurf_diff(is)
          cltot = cltot + clsurf(is)
          cxtot = cxtot + cxsurf(is)
          cytot = cytot + cysurf(is)
          cztot = cztot + czsurf(is)
          crtot = crtot + crsurf(is)
          cmtot = cmtot + cmsurf(is)
          cntot = cntot + cnsurf(is)
          cdvtot = cdvtot + cdvsurf(is)
C
          cdtot_a = cdtot_a + cds_a(is)
          cltot_a = cltot_a + cls_a(is)
C
          DO n=1,numax
            cdtot_u(n) = cdtot_u(n) + cds_u(is, n)
            cltot_u(n) = cltot_u(n) + cls_u(is, n)
            cxtot_u(n) = cxtot_u(n) + cxs_u(is, n)
            cytot_u(n) = cytot_u(n) + cys_u(is, n)
            cztot_u(n) = cztot_u(n) + czs_u(is, n)
            crtot_u(n) = crtot_u(n) + crs_u(is, n)
            cmtot_u(n) = cmtot_u(n) + cms_u(is, n)
            cntot_u(n) = cntot_u(n) + cns_u(is, n)
          ENDDO
C
          DO n=1,ncontrol
            cdtot_d(n) = cdtot_d(n) + cds_d(is, n)
            cltot_d(n) = cltot_d(n) + cls_d(is, n)
            cxtot_d(n) = cxtot_d(n) + cxs_d(is, n)
            cytot_d(n) = cytot_d(n) + cys_d(is, n)
            cztot_d(n) = cztot_d(n) + czs_d(is, n)
            crtot_d(n) = crtot_d(n) + crs_d(is, n)
            cmtot_d(n) = cmtot_d(n) + cms_d(is, n)
            cntot_d(n) = cntot_d(n) + cns_d(is, n)
          ENDDO
C
          DO n=1,ndesign
            cdtot_g(n) = cdtot_g(n) + cds_g(is, n)
            cltot_g(n) = cltot_g(n) + cls_g(is, n)
            cxtot_g(n) = cxtot_g(n) + cxs_g(is, n)
            cytot_g(n) = cytot_g(n) + cys_g(is, n)
            cztot_g(n) = cztot_g(n) + czs_g(is, n)
            crtot_g(n) = crtot_g(n) + crs_g(is, n)
            cmtot_g(n) = cmtot_g(n) + cms_g(is, n)
            cntot_g(n) = cntot_g(n) + cns_g(is, n)
          ENDDO
        END IF
      ENDDO
C-------------------------------------------------
C
C
C--- If case is XZ symmetric (IYSYM=1), add contributions from images,
C    zero out the asymmetric forces and double the symmetric ones
      IF (iysym .EQ. 1) THEN
        cdtot_diff = 2.0*cdtot_diff
        cdtot = 2.0*cdtot
        cltot_diff = 2.0*cltot_diff
        cltot = 2.0*cltot
        cxtot = 2.0*cxtot
        cytot = 0.
        cztot = 2.0*cztot
        crtot = 0.
        cmtot = 2.0*cmtot
        cntot = 0.
        cdvtot = 2.0*cdvtot
C
        cdtot_a = 2.0*cdtot_a
        cltot_a = 2.0*cltot_a
C
        DO n=1,numax
          cdtot_u(n) = 2.0*cdtot_u(n)
          cltot_u(n) = 2.0*cltot_u(n)
          cxtot_u(n) = 2.0*cxtot_u(n)
          cytot_u(n) = 0.
          cztot_u(n) = 2.0*cztot_u(n)
          crtot_u(n) = 0.
          cmtot_u(n) = 2.0*cmtot_u(n)
          cntot_u(n) = 0.
        ENDDO
C
        DO n=1,ncontrol
          cdtot_d(n) = 2.0*cdtot_d(n)
          cltot_d(n) = 2.0*cltot_d(n)
          cxtot_d(n) = 2.0*cxtot_d(n)
          cytot_d(n) = 0.
          cztot_d(n) = 2.0*cztot_d(n)
          crtot_d(n) = 0.
          cmtot_d(n) = 2.0*cmtot_d(n)
          cntot_d(n) = 0.
        ENDDO
C
        DO n=1,ndesign
          cdtot_g(n) = 2.0*cdtot_g(n)
          cltot_g(n) = 2.0*cltot_g(n)
          cxtot_g(n) = 2.0*cxtot_g(n)
          cytot_g(n) = 0.
          cztot_g(n) = 2.0*cztot_g(n)
          crtot_g(n) = 0.
          cmtot_g(n) = 2.0*cmtot_g(n)
          cntot_g(n) = 0.
        ENDDO
      END IF
C
      RETURN
      END

C  Differentiation of bdforc in forward (tangent) mode (with options i4 dr8 r8):
C   variations   of useful results: cdtot cltot
C   with respect to varying inputs: alfa vinf xyzref cdtot cltot
C SFFORC
C
C
C
      SUBROUTINE BDFORC_D()
      INCLUDE 'AVL.INC'
      INCLUDE 'AVL_ad_seeds.inc'
C
      REAL rrot(3)
      REAL rrot_diff(3)
      REAL veff(3), vrot(3), veff_u(3, 6), vrot_u(3), wrot_u(3)
      REAL veff_diff(3), vrot_diff(3)
      REAL drl(3), esl(3), fb(3), fb_u(3, numax), mb(3), mb_u(3, numax)
      REAL fb_diff(3)
      REAL cdbdy_u(numax), clbdy_u(numax), cxbdy_u(numax), cybdy_u(numax
     +     ), czbdy_u(numax), crbdy_u(numax), cmbdy_u(numax), cnbdy_u(
     +     numax)
      REAL betm
      INTRINSIC SQRT
      REAL sina
      REAL sina_diff
      INTRINSIC SIN
      REAL cosa
      REAL cosa_diff
      INTRINSIC COS
      INTEGER ib
      INTEGER iu
      INTEGER ilseg
      INTEGER l1
      INTEGER l2
      INTEGER l
      REAL drlmag
      REAL drlmi
      REAL dia
      REAL dinv
      INTEGER k
      REAL us
      REAL us_diff
      REAL un
      REAL un_diff
      REAL un_u
      REAL(kind=8) arg1
      REAL arg10
      INTEGER ii1
C
C
      arg1 = 1.0 - mach**2
      betm = SQRT(arg1)
C
      sina_diff = COS(alfa)*alfa_diff
      sina = SIN(alfa)
      cosa_diff = -(SIN(alfa)*alfa_diff)
      cosa = COS(alfa)
      DO ii1=1,nbmax
        cdbdy_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,nbmax
        clbdy_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        vrot_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        fb_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        veff_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        rrot_diff(ii1) = 0.D0
      ENDDO
C
C
C---- add on body force contributions
      DO ib=1,nbody
        cdbdy_diff(ib) = 0.D0
        cdbdy(ib) = 0.0
        clbdy_diff(ib) = 0.D0
        clbdy(ib) = 0.0
        cxbdy(ib) = 0.0
        cybdy(ib) = 0.0
        czbdy(ib) = 0.0
        crbdy(ib) = 0.0
        cmbdy(ib) = 0.0
        cnbdy(ib) = 0.0
C
        DO iu=1,6
          cdbdy_u(iu) = 0.0
          clbdy_u(iu) = 0.0
          cxbdy_u(iu) = 0.0
          cybdy_u(iu) = 0.0
          czbdy_u(iu) = 0.0
          crbdy_u(iu) = 0.0
          cmbdy_u(iu) = 0.0
          cnbdy_u(iu) = 0.0
        ENDDO
C
        DO ilseg=1,nl(ib)-1
          l1 = lfrst(ib) + ilseg - 1
          l2 = lfrst(ib) + ilseg
C
          l = l1
C
          drl(1) = (rl(1, l2)-rl(1, l1))/betm
          drl(2) = rl(2, l2) - rl(2, l1)
          drl(3) = rl(3, l2) - rl(3, l1)
          arg10 = drl(1)**2 + drl(2)**2 + drl(3)**2
          drlmag = SQRT(arg10)
          IF (drlmag .EQ. 0.0) THEN
            drlmi = 0.0
          ELSE
            drlmi = 1.0/drlmag
          END IF
C
          dia = radl(l1) + radl(l2)
          IF (dia .LE. 0.0) THEN
            dinv = 0.0
          ELSE
            dinv = 1.0/dia
          END IF
C
C-------- unit vector along line segment
          esl(1) = drl(1)*drlmi
          esl(2) = drl(2)*drlmi
          esl(3) = drl(3)*drlmi
C
          rrot_diff(1) = -xyzref_diff(1)
          rrot(1) = 0.5*(rl(1, l2)+rl(1, l1)) - xyzref(1)
          rrot_diff(2) = -xyzref_diff(2)
          rrot(2) = 0.5*(rl(2, l2)+rl(2, l1)) - xyzref(2)
          rrot_diff(3) = -xyzref_diff(3)
          rrot(3) = 0.5*(rl(3, l2)+rl(3, l1)) - xyzref(3)
C
C-------- go over freestream velocity and rotation components
          DO ii1=1,3
            wrot_diff(ii1) = 0.D0
          ENDDO
          CALL CROSS_D(rrot, rrot_diff, wrot, wrot_diff, vrot, vrot_diff
     +                )
C
          veff_diff(1) = (vinf_diff(1)+vrot_diff(1))/betm
          veff(1) = (vinf(1)+vrot(1))/betm
          veff_diff(2) = vinf_diff(2) + vrot_diff(2)
          veff(2) = vinf(2) + vrot(2)
          veff_diff(3) = vinf_diff(3) + vrot_diff(3)
          veff(3) = vinf(3) + vrot(3)
C
C-------- set VEFF sensitivities to freestream,rotation components
          DO k=1,3
            veff_u(1, k) = 0.
            veff_u(2, k) = 0.
            veff_u(3, k) = 0.
            veff_u(k, k) = 1.0
          ENDDO
C
          DO k=4,6
            wrot_u(1) = 0.
            wrot_u(2) = 0.
            wrot_u(3) = 0.
            wrot_u(k-3) = 1.0
            CALL CROSS(rrot, wrot_u, vrot_u)
C
            veff_u(1, k) = vrot_u(1)
            veff_u(2, k) = vrot_u(2)
            veff_u(3, k) = vrot_u(3)
          ENDDO
C
C-------- U.es
          us_diff = esl(1)*veff_diff(1) + esl(2)*veff_diff(2) + esl(3)*
     +      veff_diff(3)
          us = veff(1)*esl(1) + veff(2)*esl(2) + veff(3)*esl(3)
C
C
C-------- velocity projected on normal plane = U - (U.es) es
          DO k=1,3
            un_diff = veff_diff(k) - esl(k)*us_diff
            un = veff(k) - us*esl(k)
            fb_diff(k) = src(l)*un_diff
            fb(k) = un*src(l)
C
            DO iu=1,6
              un_u = veff_u(k, iu) - (veff_u(1, iu)*esl(1)+veff_u(2, iu)
     +          *esl(2)+veff_u(3, iu)*esl(3))*esl(k)
              fb_u(k, iu) = un*src_u(l, iu) + un_u*src(l)
            ENDDO
C
            dcpb(k, l) = fb(k)*2.0*dinv*drlmi
          ENDDO
C
          CALL CROSS(rrot, fb, mb)
          DO iu=1,6
            CALL CROSS(rrot, fb_u(1, iu), mb_u(1, iu))
          ENDDO
C
          cdbdy_diff(ib) = cdbdy_diff(ib) + 2.0*(cosa*fb_diff(1)+fb(1)*
     +      cosa_diff+sina*fb_diff(3)+fb(3)*sina_diff)/sref
          cdbdy(ib) = cdbdy(ib) + (fb(1)*cosa+fb(3)*sina)*2.0/sref
          clbdy_diff(ib) = clbdy_diff(ib) + 2.0*(cosa*fb_diff(3)+fb(3)*
     +      cosa_diff-sina*fb_diff(1)-fb(1)*sina_diff)/sref
          clbdy(ib) = clbdy(ib) + (-(fb(1)*sina)+fb(3)*cosa)*2.0/sref
C
          cxbdy(ib) = cxbdy(ib) + fb(1)*2.0/sref
          cybdy(ib) = cybdy(ib) + fb(2)*2.0/sref
          czbdy(ib) = czbdy(ib) + fb(3)*2.0/sref
C
          crbdy(ib) = crbdy(ib) + mb(1)*2.0/sref/bref
          cmbdy(ib) = cmbdy(ib) + mb(2)*2.0/sref/cref
          cnbdy(ib) = cnbdy(ib) + mb(3)*2.0/sref/bref
C
          DO iu=1,6
            cdbdy_u(iu) = cdbdy_u(iu) + (fb_u(1, iu)*cosa+fb_u(3, iu)*
     +        sina)*2.0/sref
            clbdy_u(iu) = clbdy_u(iu) + (-(fb_u(1, iu)*sina)+fb_u(3, iu)
     +        *cosa)*2.0/sref
C
            cxbdy_u(iu) = cxbdy_u(iu) + fb_u(1, iu)*2.0/sref
            cybdy_u(iu) = cybdy_u(iu) + fb_u(2, iu)*2.0/sref
            czbdy_u(iu) = czbdy_u(iu) + fb_u(3, iu)*2.0/sref
C
            crbdy_u(iu) = crbdy_u(iu) + mb_u(1, iu)*2.0/sref/bref
            cmbdy_u(iu) = cmbdy_u(iu) + mb_u(2, iu)*2.0/sref/cref
            cnbdy_u(iu) = cnbdy_u(iu) + mb_u(3, iu)*2.0/sref/bref
          ENDDO
        ENDDO
C
C---- add body forces and sensitivities to totals
        cdtot_diff = cdtot_diff + cdbdy_diff(ib)
        cdtot = cdtot + cdbdy(ib)
        cltot_diff = cltot_diff + clbdy_diff(ib)
        cltot = cltot + clbdy(ib)
C
        cxtot = cxtot + cxbdy(ib)
        cytot = cytot + cybdy(ib)
        cztot = cztot + czbdy(ib)
C
        crtot = crtot + crbdy(ib)
        cmtot = cmtot + cmbdy(ib)
        cntot = cntot + cnbdy(ib)
C
        DO iu=1,6
          cdtot_u(iu) = cdtot_u(iu) + cdbdy_u(iu)
          cltot_u(iu) = cltot_u(iu) + clbdy_u(iu)
C
          cxtot_u(iu) = cxtot_u(iu) + cxbdy_u(iu)
Cccc      CXTOT_U(IU) = CYTOT_U(IU) + CYBDY_U(IU)   <<< BUG  5 Dec 10  MD
          cytot_u(iu) = cytot_u(iu) + cybdy_u(iu)
          cztot_u(iu) = cztot_u(iu) + czbdy_u(iu)
C
          crtot_u(iu) = crtot_u(iu) + crbdy_u(iu)
          cmtot_u(iu) = cmtot_u(iu) + cmbdy_u(iu)
          cntot_u(iu) = cntot_u(iu) + cnbdy_u(iu)
        ENDDO
      ENDDO
C
      RETURN
      END

C  Differentiation of vinfab in forward (tangent) mode (with options i4 dr8 r8):
C   variations   of useful results: vinf
C   with respect to varying inputs: alfa
C BDFORC
C
C
C
      SUBROUTINE VINFAB_D()
      INCLUDE 'AVL.INC'
      INCLUDE 'AVL_ad_seeds.inc'
      REAL sina
      REAL sina_diff
      INTRINSIC SIN
      REAL cosa
      REAL cosa_diff
      INTRINSIC COS
      REAL sinb
      REAL cosb
      INTEGER ii1
C
      sina_diff = COS(alfa)*alfa_diff
      sina = SIN(alfa)
      cosa_diff = -(SIN(alfa)*alfa_diff)
      cosa = COS(alfa)
      sinb = SIN(beta)
      cosb = COS(beta)
C
      DO ii1=1,3
        vinf_diff(ii1) = 0.D0
      ENDDO
      vinf_diff(1) = cosb*cosa_diff
      vinf(1) = cosa*cosb
      vinf_diff(2) = 0.D0
      vinf(2) = -sinb
      vinf_diff(3) = cosb*sina_diff
      vinf(3) = sina*cosb
C
      vinf_a(1) = -(sina*cosb)
      vinf_a(2) = 0.
      vinf_a(3) = cosa*cosb
C
      vinf_b(1) = -(cosa*sinb)
      vinf_b(2) = -cosb
      vinf_b(3) = -(sina*sinb)
C
      RETURN
      END
C VINFAB


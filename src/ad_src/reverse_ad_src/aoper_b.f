C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.16 (develop) - 15 Jan 2021 14:26
C
C  Differentiation of calcst in reverse (adjoint) mode (with options i4 dr8 r8):
C   gradient     of useful results: crtot cntot crsax cnsax cdtot_al
C                cltot_al cytot_al crtot_al cmtot_al cntot_al cdtot_be
C                cltot_be cytot_be crtot_be cmtot_be cntot_be cdtot_rx
C                cltot_rx cytot_rx crtot_rx cmtot_rx cntot_rx cdtot_ry
C                cltot_ry cytot_ry crtot_ry cmtot_ry cntot_ry cdtot_rz
C                cltot_rz cytot_rz crtot_rz cmtot_rz cntot_rz
C   with respect to varying inputs: alfa vinf_a vinf_b cref bref
C                crtot cntot cdtot_a cltot_a cdtot_u cltot_u cytot_u
C                crtot_u cmtot_u cntot_u
C GETFILE
C
C
C
C ==================== addition wrapper helper programs ==============
C
      SUBROUTINE CALCST_B()
      INCLUDE 'AVL.INC'
      INCLUDE 'AVL_ad_seeds.inc'
      CHARACTER*50 satype
      REAL wrot_rx(3), wrot_rz(3), wrot_a(3)
      REAL wrot_rx_diff(3), wrot_rz_diff(3), wrot_a_diff(3)
      REAL crsax_u(numax), cmsax_u(numax), cnsax_u(numax), crsax_d(ndmax
     +     ), cmsax_d(ndmax), cnsax_d(ndmax), crsax_g(ngmax), cmsax_g(
     +     ngmax), cnsax_g(ngmax)
      REAL crsax_u_diff(numax), cmsax_u_diff(numax), cnsax_u_diff(numax)
      REAL dir
      EXTERNAL GETSA
      REAL ca
      REAL ca_diff
      INTRINSIC COS
      REAL sa
      REAL sa_diff
      INTRINSIC SIN
      REAL rx
      REAL rx_diff
      REAL ry
      REAL rz
      REAL rz_diff
      REAL crsax_a
      REAL crsax_a_diff
      REAL cnsax_a
      REAL cnsax_a_diff
      INTEGER k
      REAL cl_al
      REAL cm_al
      REAL cr_rz
      REAL cn_be
      INTRINSIC ABS
      REAL bb
      REAL cr_be
      REAL cn_rz
      REAL abs0
      REAL(kind=8) temp_diff
      INTEGER ii1
      REAL(kind=avl_real) temp_diff0
C
      CALL GETSA(lnasa_sa, satype, dir)
C CALL VINFAB
C CALL AERO
C
C---- set freestream velocity components from alpha, beta
C
C---- calculate forces and sensitivities
C
C---- set stability-axes rates (RX,RY,RZ) in terms of body-axes rates
      ca = COS(alfa)
      sa = SIN(alfa)
C
      rx = (wrot(1)*ca+wrot(3)*sa)*dir
      rz = (wrot(3)*ca-wrot(1)*sa)*dir
C
C---- now vice-versa, and set sensitivities (which is what's really needed)
Cc    WROT(1)    =  RX*CA - RZ*SA
Cc    WROT(2)    =  RY
Cc    WROT(3)    =  RZ*CA + RX*SA
C
      wrot_rx(1) = ca*dir
      wrot_rx(2) = 0.
      wrot_rx(3) = sa*dir
C
      wrot_rz(1) = -(sa*dir)
      wrot_rz(2) = 0.
      wrot_rz(3) = ca*dir
C
C!! = -WROT(3)
      wrot_a(1) = -(rx*sa) - rz*ca
      wrot_a(2) = 0.
C!! =  WROT(1)
      wrot_a(3) = -(rz*sa) + rx*ca
C
C
C
      DO k=1,6
        crsax_u(k) = crtot_u(k)*ca + cntot_u(k)*sa
        cmsax_u(k) = cmtot_u(k)
        cnsax_u(k) = cntot_u(k)*ca - crtot_u(k)*sa
      ENDDO
C
C
C---- set force derivatives in stability axes
      cltot_rx = cltot_u(4)*wrot_rx(1) + cltot_u(6)*wrot_rx(3)
      cltot_ry = cltot_u(5)
      cltot_rz = cltot_u(6)*wrot_rz(3) + cltot_u(4)*wrot_rz(1)
C
      cdtot_rx = cdtot_u(4)*wrot_rx(1) + cdtot_u(6)*wrot_rx(3)
      cdtot_ry = cdtot_u(5)
      cdtot_rz = cdtot_u(6)*wrot_rz(3) + cdtot_u(4)*wrot_rz(1)
C
      cytot_rx = cytot_u(4)*wrot_rx(1) + cytot_u(6)*wrot_rx(3)
      cytot_ry = cytot_u(5)
      cytot_rz = cytot_u(6)*wrot_rz(3) + cytot_u(4)*wrot_rz(1)
C
      crtot_rx = crsax_u(4)*wrot_rx(1) + crsax_u(6)*wrot_rx(3)
      crtot_ry = crsax_u(5)
      crtot_rz = crsax_u(6)*wrot_rz(3) + crsax_u(4)*wrot_rz(1)
C
      cmtot_rx = cmsax_u(4)*wrot_rx(1) + cmsax_u(6)*wrot_rx(3)
      cmtot_ry = cmsax_u(5)
      cmtot_rz = cmsax_u(6)*wrot_rz(3) + cmsax_u(4)*wrot_rz(1)
C
      cntot_rx = cnsax_u(4)*wrot_rx(1) + cnsax_u(6)*wrot_rx(3)
      cntot_ry = cnsax_u(5)
      cntot_rz = cnsax_u(6)*wrot_rz(3) + cnsax_u(4)*wrot_rz(1)
C
C        
C
      temp_diff0 = dir*2.0*cntot_rz_diff/bref
      cntot_rz_diff = temp_diff0
      bref_diff = -(cntot_rz*temp_diff0/bref)
      temp_diff0 = dir*2.0*cntot_ry_diff/cref
      cntot_ry_diff = temp_diff0
      cref_diff = -(cntot_ry*temp_diff0/cref)
      temp_diff0 = dir*2.0*cntot_rx_diff/bref
      cntot_rx_diff = temp_diff0
      bref_diff = bref_diff - cntot_rx*temp_diff0/bref
      temp_diff0 = 2.0*cmtot_rz_diff/bref
      cmtot_rz_diff = temp_diff0
      bref_diff = bref_diff - cmtot_rz*temp_diff0/bref
      temp_diff0 = 2.0*cmtot_ry_diff/cref
      cmtot_ry_diff = temp_diff0
      cref_diff = cref_diff - cmtot_ry*temp_diff0/cref
      temp_diff0 = 2.0*cmtot_rx_diff/bref
      cmtot_rx_diff = temp_diff0
      bref_diff = bref_diff - cmtot_rx*temp_diff0/bref
      temp_diff0 = dir*2.0*crtot_rz_diff/bref
      crtot_rz_diff = temp_diff0
      bref_diff = bref_diff - crtot_rz*temp_diff0/bref
      temp_diff0 = dir*2.0*crtot_ry_diff/cref
      crtot_ry_diff = temp_diff0
      cref_diff = cref_diff - crtot_ry*temp_diff0/cref
      temp_diff0 = dir*2.0*crtot_rx_diff/bref
      crtot_rx_diff = temp_diff0
      bref_diff = bref_diff - crtot_rx*temp_diff0/bref
      temp_diff0 = 2.0*cytot_rz_diff/bref
      cytot_rz_diff = temp_diff0
      bref_diff = bref_diff - cytot_rz*temp_diff0/bref
      temp_diff0 = 2.0*cytot_ry_diff/cref
      cytot_ry_diff = temp_diff0
      cref_diff = cref_diff - cytot_ry*temp_diff0/cref
      temp_diff0 = 2.0*cytot_rx_diff/bref
      cytot_rx_diff = temp_diff0
      bref_diff = bref_diff - cytot_rx*temp_diff0/bref
      temp_diff0 = 2.0*cdtot_rz_diff/bref
      cdtot_rz_diff = temp_diff0
      bref_diff = bref_diff - cdtot_rz*temp_diff0/bref
      temp_diff0 = 2.0*cdtot_ry_diff/cref
      cdtot_ry_diff = temp_diff0
      cref_diff = cref_diff - cdtot_ry*temp_diff0/cref
      temp_diff0 = 2.0*cdtot_rx_diff/bref
      cdtot_rx_diff = temp_diff0
      bref_diff = bref_diff - cdtot_rx*temp_diff0/bref
      temp_diff0 = 2.0*cltot_rz_diff/bref
      cltot_rz_diff = temp_diff0
      bref_diff = bref_diff - cltot_rz*temp_diff0/bref
      temp_diff0 = 2.0*cltot_ry_diff/cref
      cltot_ry_diff = temp_diff0
      cref_diff = cref_diff - cltot_ry*temp_diff0/cref
      temp_diff0 = 2.0*cltot_rx_diff/bref
      cltot_rx_diff = temp_diff0
      bref_diff = bref_diff - cltot_rx*temp_diff0/bref
      cntot_be_diff = dir*cntot_be_diff
      cntot_al_diff = dir*cntot_al_diff
      crtot_be_diff = dir*crtot_be_diff
      crtot_al_diff = dir*crtot_al_diff
      DO ii1=1,numax
        cnsax_u_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        wrot_rz_diff(ii1) = 0.D0
      ENDDO
      cnsax_u_diff(6) = cnsax_u_diff(6) + wrot_rz(3)*cntot_rz_diff + 
     +  wrot_rx(3)*cntot_rx_diff + wrot_a(3)*cntot_al_diff
      wrot_rz_diff(3) = wrot_rz_diff(3) + cnsax_u(6)*cntot_rz_diff + 
     +  cmsax_u(6)*cmtot_rz_diff + crsax_u(6)*crtot_rz_diff + cytot_u(6)
     +  *cytot_rz_diff + cdtot_u(6)*cdtot_rz_diff + cltot_u(6)*
     +  cltot_rz_diff
      cnsax_u_diff(4) = cnsax_u_diff(4) + wrot_rz(1)*cntot_rz_diff + 
     +  wrot_rx(1)*cntot_rx_diff + wrot_a(1)*cntot_al_diff
      wrot_rz_diff(1) = wrot_rz_diff(1) + cnsax_u(4)*cntot_rz_diff + 
     +  cmsax_u(4)*cmtot_rz_diff + crsax_u(4)*crtot_rz_diff + cytot_u(4)
     +  *cytot_rz_diff + cdtot_u(4)*cdtot_rz_diff + cltot_u(4)*
     +  cltot_rz_diff
      cnsax_u_diff(5) = cnsax_u_diff(5) + cntot_ry_diff + wrot_a(2)*
     +  cntot_al_diff
      DO ii1=1,3
        wrot_rx_diff(ii1) = 0.D0
      ENDDO
      wrot_rx_diff(1) = wrot_rx_diff(1) + cnsax_u(4)*cntot_rx_diff + 
     +  cmsax_u(4)*cmtot_rx_diff + crsax_u(4)*crtot_rx_diff + cytot_u(4)
     +  *cytot_rx_diff + cdtot_u(4)*cdtot_rx_diff + cltot_u(4)*
     +  cltot_rx_diff
      wrot_rx_diff(3) = wrot_rx_diff(3) + cnsax_u(6)*cntot_rx_diff + 
     +  cmsax_u(6)*cmtot_rx_diff + crsax_u(6)*crtot_rx_diff + cytot_u(6)
     +  *cytot_rx_diff + cdtot_u(6)*cdtot_rx_diff + cltot_u(6)*
     +  cltot_rx_diff
      DO ii1=1,3
        vinf_b_diff(ii1) = 0.D0
      ENDDO
      cnsax_u_diff(1) = cnsax_u_diff(1) + vinf_b(1)*cntot_be_diff + 
     +  vinf_a(1)*cntot_al_diff
      vinf_b_diff(1) = vinf_b_diff(1) + cnsax_u(1)*cntot_be_diff + 
     +  cmsax_u(1)*cmtot_be_diff + crsax_u(1)*crtot_be_diff + cytot_u(1)
     +  *cytot_be_diff + cdtot_u(1)*cdtot_be_diff + cltot_u(1)*
     +  cltot_be_diff
      cnsax_u_diff(2) = cnsax_u_diff(2) + vinf_b(2)*cntot_be_diff + 
     +  vinf_a(2)*cntot_al_diff
      vinf_b_diff(2) = vinf_b_diff(2) + cnsax_u(2)*cntot_be_diff + 
     +  cmsax_u(2)*cmtot_be_diff + crsax_u(2)*crtot_be_diff + cytot_u(2)
     +  *cytot_be_diff + cdtot_u(2)*cdtot_be_diff + cltot_u(2)*
     +  cltot_be_diff
      cnsax_u_diff(3) = cnsax_u_diff(3) + vinf_b(3)*cntot_be_diff + 
     +  vinf_a(3)*cntot_al_diff
      vinf_b_diff(3) = vinf_b_diff(3) + cnsax_u(3)*cntot_be_diff + 
     +  cmsax_u(3)*cmtot_be_diff + crsax_u(3)*crtot_be_diff + cytot_u(3)
     +  *cytot_be_diff + cdtot_u(3)*cdtot_be_diff + cltot_u(3)*
     +  cltot_be_diff
      DO ii1=1,3
        vinf_a_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,3
        wrot_a_diff(ii1) = 0.D0
      ENDDO
      vinf_a_diff(1) = vinf_a_diff(1) + cnsax_u(1)*cntot_al_diff + 
     +  cmsax_u(1)*cmtot_al_diff + crsax_u(1)*crtot_al_diff + cytot_u(1)
     +  *cytot_al_diff + cdtot_u(1)*cdtot_al_diff + cltot_u(1)*
     +  cltot_al_diff
      wrot_a_diff(1) = wrot_a_diff(1) + cnsax_u(4)*cntot_al_diff + 
     +  cmsax_u(4)*cmtot_al_diff + crsax_u(4)*crtot_al_diff + cytot_u(4)
     +  *cytot_al_diff + cdtot_u(4)*cdtot_al_diff + cltot_u(4)*
     +  cltot_al_diff
      vinf_a_diff(2) = vinf_a_diff(2) + cnsax_u(2)*cntot_al_diff + 
     +  cmsax_u(2)*cmtot_al_diff + crsax_u(2)*crtot_al_diff + cytot_u(2)
     +  *cytot_al_diff + cdtot_u(2)*cdtot_al_diff + cltot_u(2)*
     +  cltot_al_diff
      wrot_a_diff(2) = wrot_a_diff(2) + cnsax_u(5)*cntot_al_diff + 
     +  cmsax_u(5)*cmtot_al_diff + crsax_u(5)*crtot_al_diff + cytot_u(5)
     +  *cytot_al_diff + cdtot_u(5)*cdtot_al_diff + cltot_u(5)*
     +  cltot_al_diff
      vinf_a_diff(3) = vinf_a_diff(3) + cnsax_u(3)*cntot_al_diff + 
     +  cmsax_u(3)*cmtot_al_diff + crsax_u(3)*crtot_al_diff + cytot_u(3)
     +  *cytot_al_diff + cdtot_u(3)*cdtot_al_diff + cltot_u(3)*
     +  cltot_al_diff
      wrot_a_diff(3) = wrot_a_diff(3) + cnsax_u(6)*cntot_al_diff + 
     +  cmsax_u(6)*cmtot_al_diff + crsax_u(6)*crtot_al_diff + cytot_u(6)
     +  *cytot_al_diff + cdtot_u(6)*cdtot_al_diff + cltot_u(6)*
     +  cltot_al_diff
      cnsax_a_diff = cntot_al_diff
      DO ii1=1,numax
        cmsax_u_diff(ii1) = 0.D0
      ENDDO
      cmsax_u_diff(6) = cmsax_u_diff(6) + wrot_rz(3)*cmtot_rz_diff + 
     +  wrot_rx(3)*cmtot_rx_diff + wrot_a(3)*cmtot_al_diff
      cmsax_u_diff(4) = cmsax_u_diff(4) + wrot_rz(1)*cmtot_rz_diff + 
     +  wrot_rx(1)*cmtot_rx_diff + wrot_a(1)*cmtot_al_diff
      cmsax_u_diff(5) = cmsax_u_diff(5) + cmtot_ry_diff + wrot_a(2)*
     +  cmtot_al_diff
      cmsax_u_diff(1) = cmsax_u_diff(1) + vinf_b(1)*cmtot_be_diff + 
     +  vinf_a(1)*cmtot_al_diff
      cmsax_u_diff(2) = cmsax_u_diff(2) + vinf_b(2)*cmtot_be_diff + 
     +  vinf_a(2)*cmtot_al_diff
      cmsax_u_diff(3) = cmsax_u_diff(3) + vinf_b(3)*cmtot_be_diff + 
     +  vinf_a(3)*cmtot_al_diff
      DO ii1=1,numax
        crsax_u_diff(ii1) = 0.D0
      ENDDO
      crsax_u_diff(6) = crsax_u_diff(6) + wrot_rz(3)*crtot_rz_diff + 
     +  wrot_rx(3)*crtot_rx_diff + wrot_a(3)*crtot_al_diff
      crsax_u_diff(4) = crsax_u_diff(4) + wrot_rz(1)*crtot_rz_diff + 
     +  wrot_rx(1)*crtot_rx_diff + wrot_a(1)*crtot_al_diff
      crsax_u_diff(5) = crsax_u_diff(5) + crtot_ry_diff + wrot_a(2)*
     +  crtot_al_diff
      crsax_u_diff(1) = crsax_u_diff(1) + vinf_b(1)*crtot_be_diff + 
     +  vinf_a(1)*crtot_al_diff
      crsax_u_diff(2) = crsax_u_diff(2) + vinf_b(2)*crtot_be_diff + 
     +  vinf_a(2)*crtot_al_diff
      crsax_u_diff(3) = crsax_u_diff(3) + vinf_b(3)*crtot_be_diff + 
     +  vinf_a(3)*crtot_al_diff
      crsax_a_diff = crtot_al_diff
      DO ii1=1,numax
        cytot_u_diff(ii1) = 0.D0
      ENDDO
      cytot_u_diff(6) = cytot_u_diff(6) + wrot_rz(3)*cytot_rz_diff + 
     +  wrot_rx(3)*cytot_rx_diff + wrot_a(3)*cytot_al_diff
      cytot_u_diff(4) = cytot_u_diff(4) + wrot_rz(1)*cytot_rz_diff + 
     +  wrot_rx(1)*cytot_rx_diff + wrot_a(1)*cytot_al_diff
      cytot_u_diff(5) = cytot_u_diff(5) + cytot_ry_diff + wrot_a(2)*
     +  cytot_al_diff
      cytot_u_diff(1) = cytot_u_diff(1) + vinf_b(1)*cytot_be_diff + 
     +  vinf_a(1)*cytot_al_diff
      cytot_u_diff(2) = cytot_u_diff(2) + vinf_b(2)*cytot_be_diff + 
     +  vinf_a(2)*cytot_al_diff
      cytot_u_diff(3) = cytot_u_diff(3) + vinf_b(3)*cytot_be_diff + 
     +  vinf_a(3)*cytot_al_diff
      DO ii1=1,numax
        cdtot_u_diff(ii1) = 0.D0
      ENDDO
      cdtot_u_diff(6) = cdtot_u_diff(6) + wrot_rz(3)*cdtot_rz_diff + 
     +  wrot_rx(3)*cdtot_rx_diff + wrot_a(3)*cdtot_al_diff
      cdtot_u_diff(4) = cdtot_u_diff(4) + wrot_rz(1)*cdtot_rz_diff + 
     +  wrot_rx(1)*cdtot_rx_diff + wrot_a(1)*cdtot_al_diff
      cdtot_u_diff(5) = cdtot_u_diff(5) + cdtot_ry_diff + wrot_a(2)*
     +  cdtot_al_diff
      cdtot_u_diff(1) = cdtot_u_diff(1) + vinf_b(1)*cdtot_be_diff + 
     +  vinf_a(1)*cdtot_al_diff
      cdtot_u_diff(2) = cdtot_u_diff(2) + vinf_b(2)*cdtot_be_diff + 
     +  vinf_a(2)*cdtot_al_diff
      cdtot_u_diff(3) = cdtot_u_diff(3) + vinf_b(3)*cdtot_be_diff + 
     +  vinf_a(3)*cdtot_al_diff
      cdtot_a_diff = cdtot_al_diff
      DO ii1=1,numax
        cltot_u_diff(ii1) = 0.D0
      ENDDO
      cltot_u_diff(6) = cltot_u_diff(6) + wrot_rz(3)*cltot_rz_diff + 
     +  wrot_rx(3)*cltot_rx_diff + wrot_a(3)*cltot_al_diff
      cltot_u_diff(4) = cltot_u_diff(4) + wrot_rz(1)*cltot_rz_diff + 
     +  wrot_rx(1)*cltot_rx_diff + wrot_a(1)*cltot_al_diff
      cltot_u_diff(5) = cltot_u_diff(5) + cltot_ry_diff + wrot_a(2)*
     +  cltot_al_diff
      cltot_u_diff(1) = cltot_u_diff(1) + vinf_b(1)*cltot_be_diff + 
     +  vinf_a(1)*cltot_al_diff
      cltot_u_diff(2) = cltot_u_diff(2) + vinf_b(2)*cltot_be_diff + 
     +  vinf_a(2)*cltot_al_diff
      cltot_u_diff(3) = cltot_u_diff(3) + vinf_b(3)*cltot_be_diff + 
     +  vinf_a(3)*cltot_al_diff
      cltot_a_diff = cltot_al_diff
      DO ii1=1,numax
        crtot_u_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,numax
        cmtot_u_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,numax
        cntot_u_diff(ii1) = 0.D0
      ENDDO
      sa_diff = 0.D0
      ca_diff = 0.D0
      DO k=6,1,-1
        cntot_u_diff(k) = cntot_u_diff(k) + ca*cnsax_u_diff(k) + sa*
     +    crsax_u_diff(k)
        ca_diff = ca_diff + cntot_u(k)*cnsax_u_diff(k) + crtot_u(k)*
     +    crsax_u_diff(k)
        crtot_u_diff(k) = crtot_u_diff(k) + ca*crsax_u_diff(k) - sa*
     +    cnsax_u_diff(k)
        sa_diff = sa_diff + cntot_u(k)*crsax_u_diff(k) - crtot_u(k)*
     +    cnsax_u_diff(k)
        cnsax_u_diff(k) = 0.D0
        cmtot_u_diff(k) = cmtot_u_diff(k) + cmsax_u_diff(k)
        cmsax_u_diff(k) = 0.D0
        crsax_u_diff(k) = 0.D0
      ENDDO
      rz_diff = -(sa*wrot_a_diff(3)) - ca*wrot_a_diff(1)
      rx_diff = ca*wrot_a_diff(3) - sa*wrot_a_diff(1)
      temp_diff = dir*cnsax_diff
      cntot_diff = cntot_diff + ca*crsax_a_diff - sa*cnsax_a_diff + ca*
     +  temp_diff
      sa_diff = sa_diff - cntot*cnsax_a_diff - crtot*crsax_a_diff - 
     +  crtot*temp_diff
      crtot_diff = crtot_diff - ca*cnsax_a_diff - sa*crsax_a_diff - sa*
     +  temp_diff
      ca_diff = ca_diff + cntot*crsax_a_diff - crtot*cnsax_a_diff + 
     +  cntot*temp_diff
      temp_diff = dir*crsax_diff
      crtot_diff = crtot_diff + ca*temp_diff
      ca_diff = ca_diff + crtot*temp_diff + rx*wrot_a_diff(3) + dir*
     +  wrot_rz_diff(3) - rz*wrot_a_diff(1) + dir*wrot_rx_diff(1) + wrot
     +  (3)*dir*rz_diff + wrot(1)*dir*rx_diff
      cntot_diff = cntot_diff + sa*temp_diff
      sa_diff = sa_diff + cntot*temp_diff + dir*wrot_rx_diff(3) - rz*
     +  wrot_a_diff(3) - rx*wrot_a_diff(1) - dir*wrot_rz_diff(1) + wrot(
     +  3)*dir*rx_diff - wrot(1)*dir*rz_diff
      wrot_a_diff(3) = 0.D0
      wrot_a_diff(2) = 0.D0
      wrot_rz_diff(3) = 0.D0
      wrot_rz_diff(2) = 0.D0
      wrot_rx_diff(3) = 0.D0
      wrot_rx_diff(2) = 0.D0
      alfa_diff = COS(alfa)*sa_diff - SIN(alfa)*ca_diff
C
C        WRITE(*,8401) XNP
 8401 FORMAT(/'Neutral point  Xnp =',f11.6)
      END

C  Differentiation of get_res in reverse (adjoint) mode (with options i4 dr8 r8):
C   gradient     of useful results: alfa beta vinf vinf_a vinf_b
C                delcon xyzref mach cdref rv1 rv2 rc gam gam_u
C                gam_d res res_u res_d
C   with respect to varying inputs: ysym zsym alfa beta vinf vinf_a
C                vinf_b parval conval delcon xyzref mach cdref
C                rv1 rv2 rc chordv enc enc_d gam gam_u gam_d res
C                res_u res_d
C   RW status of diff variables: ysym:out zsym:out alfa:in-out
C                beta:in-out vinf:in-out vinf_a:in-out vinf_b:in-out
C                parval:out conval:out delcon:in-out xyzref:in-out
C                mach:in-zero cdref:in-zero rv1:incr rv2:incr rc:incr
C                chordv:out enc:out enc_d:out gam:incr gam_u:incr
C                gam_d:incr res:in-zero res_u:in-out res_d:in-out
Csubroutine exec_rhs
C
C
C ======================== res and Adjoint for GAM ========      
      SUBROUTINE GET_RES_B()
C
      INCLUDE 'AVL.INC'
      INCLUDE 'AVL_ad_seeds.inc'
      INTEGER i, ic
      REAL rhs_d(nvor)
      REAL rhs_d_diff(nvor)
      REAL betm
      INTRINSIC SQRT
      INTEGER iu
      INTEGER ii1
      INTEGER ii2
      INTEGER ii3
      CALL SET_PAR_AND_CONS(nitmax, irun)
C Do not use this routine in the sovler
C IF(.NOT.LAIC) THEN
C      CALL build_AIC
C end if
C---  
      CALL BUILD_AIC()
C
C---- set VINF() vector from initial ALFA,BETA
      CALL VINFAB()
      DO ii1=1,3
        wrot_diff(ii1) = 0.D0
      ENDDO
      DO ii1=1,ndmax
        DO ii2=1,nvmax
          DO ii3=1,3
            enc_d_diff(ii3, ii2, ii1) = 0.D0
          ENDDO
        ENDDO
      ENDDO
      DO ii1=1,nvmax
        DO ii2=1,nvmax
          aicn_diff(ii2, ii1) = 0.D0
        ENDDO
      ENDDO
      DO ii1=1,nvor
        rhs_d_diff(ii1) = 0.D0
      ENDDO
C$BWD-OF II-LOOP 
      DO ic=1,ncontrol
C------ don't bother if this control variable is undefined
        IF (lcondef(ic)) THEN
C$BWD-OF II-LOOP 
          DO i=1,nvor
            rhs_d_diff(i) = rhs_d_diff(i) - res_d_diff(i, ic)
          ENDDO
          CALL SET_GAM_D_RHS_B(ic, enc_d, enc_d_diff, rhs_d, rhs_d_diff)
          CALL MAT_PROD_B(aicn, aicn_diff, gam_d(:, ic), gam_d_diff(:, 
     +                    ic), nvor, res_d(:, ic), res_d_diff(:, ic))
          DO ii1=1,6000
            res_d_diff(ii1, ic) = 0.D0
          ENDDO
        END IF
      ENDDO
      DO ii1=1,nvmax
        rhs_diff(ii1) = 0.D0
      ENDDO
C$BWD-OF II-LOOP 
      DO i=1,nvor
        rhs_diff(i) = rhs_diff(i) - res_diff(i)
      ENDDO
      CALL MAT_PROD_B(aicn, aicn_diff, gam, gam_diff, nvor, res, 
     +                res_diff)
      DO ii1=1,6000
        res_diff(ii1) = 0.D0
      ENDDO
      CALL SET_VEL_RHS_B()
      DO ii1=1,numax
        DO ii2=1,nvmax
          rhs_u_diff(ii2, ii1) = 0.D0
        ENDDO
      ENDDO
      DO iu=6,1,-1
        DO i=nvor,1,-1
          rhs_u_diff(i, iu) = rhs_u_diff(i, iu) - res_u_diff(i, iu)
        ENDDO
        CALL SET_VEL_RHS_U_B(iu)
        CALL MAT_PROD_B(aicn, aicn_diff, gam_u(:, iu), gam_u_diff(:, iu)
     +                  , nvor, res_u(:, iu), res_u_diff(:, iu))
        DO ii1=1,6000
          res_u_diff(ii1, iu) = 0.D0
        ENDDO
      ENDDO
      CALL VINFAB_B()
      CALL BUILD_AIC_B()
      CALL SET_PAR_AND_CONS_B(nitmax, irun)
      mach_diff = 0.D0
      cdref_diff = 0.D0
      END

